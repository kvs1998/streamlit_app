# tabs/dt_health_tab.py (Focus on Filter Application Logic)
import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta

# --- Helper functions (from previous code) ---
def format_seconds_to_readable(seconds_series, format_type):
    if not isinstance(seconds_series, pd.Series):
        seconds_series = pd.Series([seconds_series])
    numeric_series = pd.to_numeric(seconds_series, errors='coerce')
    if numeric_series.empty or pd.isna(numeric_series).all():
        return pd.Series(["N/A"] * len(numeric_series), index=numeric_series.index)
    def format_single_second(s, f_type):
        if pd.isna(s): return "N/A"
        s = float(s)
        if s == 0: return "0s"
        if f_type == "seconds": return f"{s:.1f}s"
        elif f_type == "minutes": return f"{(s / 60):.1f}m"
        elif f_type == "hours": return f"{(s / 3600):.1f}h"
        elif f_type == "days": return f"{(s / 86400):.1f}d"
        elif f_type == "mixed":
            days = int(s // 86400); s_remaining = s % 86400
            hours = int(s_remaining // 3600); s_remaining = s_remaining % 3600
            minutes = int(s_remaining // 60); seconds = s_remaining % 60
            parts = []
            if days > 0: parts.append(f"{days}d")
            if hours > 0: parts.append(f"{hours}h")
            if minutes > 0: parts.append(f"{minutes}m")
            if seconds > 0.1 and (not parts or seconds >= 1): parts.append(f"{seconds:.1f}s")
            return " ".join(parts) if parts else "0s"
        return str(s)
    return numeric_series.apply(lambda x: format_single_second(x, f_type=format_type))

# Helper function for format_func parameter (replicate from filter_canvas or import)
def format_target_lag_option_for_display(option_value):
    if option_value == 'All':
        return 'All'
    if isinstance(option_value, (int, float)): # Option value is the raw number
        s = float(option_value)
        if s == 0: return "0s"
        days = int(s // 86400); s_remaining = s % 86400
        hours = int(s_remaining // 3600); s_remaining = s_remaining % 3600
        minutes = int(s_remaining // 60); seconds = s_remaining % 60
        parts = []
        if days > 0: parts.append(f"{days}d")
        if hours > 0: parts.append(f"{hours}h")
        if minutes > 0: parts.append(f"{minutes}m")
        if seconds > 0.1 and (not parts or seconds >= 1):
            parts.append(f"{seconds:.1f}s")
        return " ".join(parts) if parts else "0s"
    return str(option_value)

# --- Data Fetching Functions ---

@st.cache_data(ttl=(12*60*60))
def fetch_driver_execution_history_summary():
    session = st.session_state.get_snowflake_session()
    AUDIT_LOG_TABLE_FQDN = "YOUR_DB.YOUR_SCHEMA.T_DT_COLLECTION_AUDIT_LOG"
    query = f"""
    SELECT
        DRIVER_RUN_UUID, RUN_STATUS, RUN_START_TIME, RUN_END_TIME,
        TOTAL_DURATION_SEC, TOTAL_TABLES_FOUND, TOTAL_JOBS_LAUNCHED,
        TOTAL_ASYNC_JOBS_SUCCEEDED, TOTAL_ASYNC_JOBS_FAILED,
        MESSAGE AS RUN_MESSAGE, TIMEZONE
    FROM {AUDIT_LOG_TABLE_FQDN}
    WHERE RUN_START_TIME >= DATEADD(day, -30, CURRENT_TIMESTAMP())
    ORDER BY RUN_START_TIME DESC
    """
    df = session.sql(query).to_pandas()
    if not df.empty:
        df['RUN_START_TIME'] = pd.to_datetime(df['RUN_START_TIME'])
        df['RUN_END_TIME'] = pd.to_datetime(df['RUN_END_TIME'])
    return df

@st.cache_data(ttl=(5*60))
def fetch_dt_tracking_data():
    session = st.session_state.get_snowflake_session()
    TRACKING_TABLE_FQDN = "YOUR_DB.YOUR_SCHEMA.T_DYNAMIC_TABLE_TRACKING"
    METADATA_SNAPSHOT_TABLE_FQDN = "YOUR_DB.YOUR_SCHEMA.T_DYNAMIC_TABLE_METADATA_LATEST_SNAPSHOT"

    query = f"""
    SELECT
        t.QUALIFIED_NAME,
        t.DATABASE_NAME,
        t.SCHEMA_NAME,
        t.TABLE_NAME,
        t.DOMAIN_NAME,
        t.SUB_DOMAIN_NAME,
        t.IS_ACTIVE,
        t.TRACK_REFRESH_HISTORY,
        t.LAST_REFRESH_HISTORY_COLLECTION_TIMESTAMP,
        t.LAST_REFRESH_HISTORY_COLLECTION_STATUS,
        t.LAST_REFRESH_HISTORY_COLLECTION_MESSAGE,
        t.TRACK_METADATA_SNAPSHOT,
        t.LAST_METADATA_COLLECTION_TIMESTAMP,
        t.LAST_METADATA_COLLECTION_STATUS,
        t.LAST_METADATA_COLLECTION_MESSAGE,
        ms.LATEST_DATA_TIMESTAMP,
        ms.MEAN_LAG_SEC,
        ms.MAXIMUM_LAG_SEC,
        ms.TARGET_LAG_SEC,
        t.UPDATED_AT
    FROM
        {TRACKING_TABLE_FQDN} AS t
    LEFT JOIN
        {METADATA_SNAPSHOT_TABLE_FQDN} AS ms
    ON
        t.QUALIFIED_NAME = ms.QUALIFIED_NAME
    ORDER BY
        t.QUALIFIED_NAME
    """
    df = session.sql(query).to_pandas()
    if not df.empty:
        df['LAST_REFRESH_HISTORY_COLLECTION_TIMESTAMP'] = pd.to_datetime(df['LAST_REFRESH_HISTORY_COLLECTION_TIMESTAMP'])
        df['LAST_METADATA_COLLECTION_TIMESTAMP'] = pd.to_datetime(df['LAST_METADATA_COLLECTION_TIMESTAMP'])
        df['LATEST_DATA_TIMESTAMP'] = pd.to_datetime(df['LATEST_DATA_TIMESTAMP'])
        df['UPDATED_AT'] = pd.to_datetime(df['UPDATED_AT'])
    return df


# --- Helper to manage widget state persistence for local filters ---
# Note: these helpers work with the `key` parameter directly, assuming no `_dummy_key` pattern.
# Streamlit will read/write st.session_state[key] directly.
def persist_local_widget_state(key): # Argument directly is the session_state key
    # No explicit action needed here, as widget's 'key' param directly updates st.session_state[key]
    # This function merely serves as an on_change callback that forces a rerun.
    pass 

def load_local_widget_state(key, default_value):
    """
    Ensures a session state key exists with a default value if not set.
    Returns the current value for widget initialization.
    """
    if key not in st.session_state:
        st.session_state[key] = default_value
    return st.session_state[key]


# --- Main Render Function for the DT Health Tab ---
def render_dt_health_tab():
    st.header("Dynamic Table Health Dashboard")
    st.write("Overview of driver execution, collection status, and detailed table health.")

    # --- 1. Fetch Data ---
    driver_history_df = fetch_driver_execution_history_summary()
    all_tracking_data_df = fetch_dt_tracking_data() # Fetches all data initially

    if all_tracking_data_df.empty:
        st.info("No data available from tracking tables. Please check data sources.", icon="ℹ️")
        return
    
    # --- Apply GLOBAL Filters (First Level of Filtering) from session_state ---
    globally_filtered_data = all_tracking_data_df.copy()

    # Get values from st.session_state (initialized in app_driver.py/filter_canvas.py)
    global_domain_name = st.session_state.get('global_domain_name', 'All')
    global_sub_domain_name = st.session_state.get('global_sub_domain_name', 'All')
    global_db_filter = st.session_state.get('global_db_filter', 'All')
    global_schema_filter = st.session_state.get('global_schema_filter', 'All')
    global_table_filter = st.session_state.get('global_table_filter', ['All'])
    global_scheduling_state_filter = st.session_state.get('global_scheduling_state_filter', ['All'])
    global_target_lag_filter = st.session_state.get('global_target_lag', ['All'])
    global_is_active_filter = st.session_state.get('global_is_active_filter', 'All')
    global_display_lag_times_in = st.session_state.get('display_lag_times_in', 'mixed') # Radio button


    # Apply global filters in their logical dependency order for correctness
    # (Domain -> Subdomain -> Database -> Schema -> Table)
    # This also helps ensure that if a higher-level global filter is set, lower-level local filters
    # will implicitly operate on this already reduced dataset.

    if global_domain_name != 'All':
        globally_filtered_data = globally_filtered_data[globally_filtered_data['DOMAIN_NAME'] == global_domain_name]
    if global_sub_domain_name != 'All':
        globally_filtered_data = globally_filtered_data[globally_filtered_data['SUB_DOMAIN_NAME'] == global_sub_domain_name]
    if global_db_filter != 'All':
        globally_filtered_data = globally_filtered_data[globally_filtered_data['DATABASE_NAME'] == global_db_filter]
    if global_schema_filter != 'All':
        globally_filtered_data = globally_filtered_data[globally_filtered_data['SCHEMA_NAME'] == global_schema_filter]
    
    # Multiselect filters: check if 'All' is NOT in the list
    if 'All' not in global_table_filter:
        globally_filtered_data = globally_filtered_data[globally_filtered_data['TABLE_NAME'].isin(global_table_filter)]
    if 'All' not in global_scheduling_state_filter:
        globally_filtered_data = globally_filtered_data[globally_filtered_data['LAST_REFRESH_HISTORY_COLLECTION_STATUS'].isin(global_scheduling_state_filter)]
    if 'All' not in global_target_lag_filter:
        global_target_lag_values_numeric = [int(s.replace('s', '')) for s in global_target_lag_filter]
        globally_filtered_data = globally_filtered_data[globally_filtered_data['TARGET_LAG_SEC'].isin(global_target_lag_values_numeric)]
    
    # Boolean/other independent filters
    if global_is_active_filter != 'All':
        globally_filtered_data = globally_filtered_data[globally_filtered_data['IS_ACTIVE'] == global_is_active_filter]
    

    if globally_filtered_data.empty:
        st.info("No data available based on the current Global Filter Canvas selections. Please adjust your global filters.", icon="ℹ️")
        return


    # --- Local Filters (Second Level of Filtering) for this tab's specific UI ---
    st.markdown("---")
    st.subheader("Apply Filters for DT Health (Local)")

    # Load initial local filter states (using a distinct prefix like 'dt_health_tab_')
    load_local_widget_state('dt_health_tab_domain_name', 'All')
    load_local_widget_state('dt_health_tab_sub_domain_name', 'All')
    load_local_widget_state('dt_health_tab_db_filter', 'All')
    load_local_widget_state('dt_health_tab_schema_filter', 'All')
    load_local_widget_state('dt_health_tab_table_filter', ['All'])
    load_local_widget_state('dt_health_tab_scheduling_state_filter', ['All'])
    load_local_widget_state('dt_health_tab_target_lag', ['All'])
    load_local_widget_state('dt_health_tab_display_lag_times_in', 'mixed')


    # This DataFrame will be progressively filtered by local filters as we derive options for cascading widgets.
    # It starts from the GLOBALLY filtered data.
    locally_filtered_df_for_cascading_options = globally_filtered_data.copy()

    # Define columns for local filter layout
    filter_cols_row1_local = st.columns(4) # Domain, SubDomain, Database, Schema
    filter_cols_row2_local = st.columns(4) # Table(s), Scheduling State, Target Lag, Display Lag Times In


    # --- Row 1 (Local): Domain Name, Sub Domain Name, Database, Schema ---
    # These local filters will update their own `st.session_state` keys and cascade.

    # 1. Local Domain Name Filter
    with filter_cols_row1_local[0]:
        all_domains_local = ['All'] + sorted(locally_filtered_df_for_cascading_options['DOMAIN_NAME'].unique().tolist())
        selected_domain_local = st.session_state.dt_health_tab_domain_name
        if selected_domain_local not in all_domains_local: st.session_state.dt_health_tab_domain_name = 'All'
        st.selectbox("Domain Name:", options=all_domains_local, key="dt_health_tab_domain_name", on_change=persist_local_widget_state, args=("dt_health_tab_domain_name",))
        # Filter for next local dropdown in cascade
        if st.session_state.dt_health_tab_domain_name != 'All':
            locally_filtered_df_for_cascading_options = locally_filtered_df_for_cascading_options[locally_filtered_df_for_cascading_options['DOMAIN_NAME'] == st.session_state.dt_health_tab_domain_name]

    # 2. Local Sub Domain Name Filter
    with filter_cols_row1_local[1]:
        all_sub_domains_local = ['All'] + sorted(locally_filtered_df_for_cascading_options['SUB_DOMAIN_NAME'].dropna().unique().tolist())
        selected_sub_domain_local = st.session_state.dt_health_tab_sub_domain_name
        if selected_sub_domain_local not in all_sub_domains_local: st.session_state.dt_health_tab_sub_domain_name = 'All'
        st.selectbox("Sub Domain Name:", options=all_sub_domains_local, key="dt_health_tab_sub_domain_name", on_change=persist_local_widget_state, args=("dt_health_tab_sub_domain_name",))
        # Filter for next local dropdown in cascade
        if st.session_state.dt_health_tab_sub_domain_name != 'All':
            locally_filtered_df_for_cascading_options = locally_filtered_df_for_cascading_options[locally_filtered_df_for_cascading_options['SUB_DOMAIN_NAME'] == st.session_state.dt_health_tab_sub_domain_name]

    # 3. Local Database Filter
    with filter_cols_row1_local[2]:
        all_databases_local = ['All'] + sorted(locally_filtered_df_for_cascading_options['DATABASE_NAME'].unique().tolist())
        selected_db_local = st.session_state.dt_health_tab_db_filter
        if selected_db_local not in all_databases_local: st.session_state.dt_health_tab_db_filter = 'All'
        st.selectbox("Database:", options=all_databases_local, key="dt_health_tab_db_filter", on_change=persist_local_widget_state, args=("dt_health_tab_db_filter",))
        # Filter for next local dropdown in cascade
        if st.session_state.dt_health_tab_db_filter != 'All':
            locally_filtered_df_for_cascading_options = locally_filtered_df_for_cascading_options[locally_filtered_df_for_cascading_options['DATABASE_NAME'] == st.session_state.dt_health_tab_db_filter]

    # 4. Local Schema Filter
    with filter_cols_row1_local[3]:
        all_schemas_local = ['All'] + sorted(locally_filtered_df_for_cascading_options['SCHEMA_NAME'].unique().tolist())
        selected_schema_local = st.session_state.dt_health_tab_schema_filter
        if selected_schema_local not in all_schemas_local: st.session_state.dt_health_tab_schema_filter = 'All'
        st.selectbox("Schema:", options=all_schemas_local, key="dt_health_tab_schema_filter", on_change=persist_local_widget_state, args=("dt_health_tab_schema_filter",))
        # Filter for next local dropdown in cascade
        if st.session_state.dt_health_tab_schema_filter != 'All':
            locally_filtered_df_for_cascading_options = locally_filtered_df_for_cascading_options[locally_filtered_df_for_cascading_options['SCHEMA_NAME'] == st.session_state.dt_health_tab_schema_filter]


    # --- Row 2 (Local): Table(s), Scheduling State(s), Target Lag (seconds), Display Lag Times In ---

    # 5. Local Table(s) Filter (Depends on Schema)
    with filter_cols_row2_local[0]:
        all_tables_local = ['All'] + sorted(locally_filtered_df_for_cascading_options['TABLE_NAME'].unique().tolist())
        selected_tables_local = st.session_state.dt_health_tab_table_filter
        valid_current_tables_local = [t for t in selected_tables_local if t in all_tables_local]
        if not valid_current_tables_local and 'All' in all_tables_local: st.session_state.dt_health_tab_table_filter = ['All']
        elif not valid_current_tables_local: st.session_state.dt_health_tab_table_filter = []
        # Update session state before rendering, so default is correct.
        st.session_state.dt_health_tab_table_filter = valid_current_tables_local
        st.multiselect("Table(s):", options=all_tables_local, key="dt_health_tab_table_filter", default=st.session_state.dt_health_tab_table_filter, on_change=persist_local_widget_state, args=("dt_health_tab_table_filter",))
        # No further cascade from here.


    # 6. Local Scheduling State(s) Filter (Independent)
    with filter_cols_row2_local[1]:
        all_scheduling_states_local = ['All'] + sorted(all_tracking_data_df['LAST_REFRESH_HISTORY_COLLECTION_STATUS'].unique().tolist()) # From original data, not cascaded
        selected_sched_state_local = st.session_state.dt_health_tab_scheduling_state_filter
        valid_current_sched_states_local = [s for s in selected_sched_state_local if s in all_scheduling_states_local]
        if not valid_current_sched_states_local and 'All' in all_scheduling_states_local: st.session_state.dt_health_tab_scheduling_state_filter = ['All']
        elif not valid_current_sched_states_local: st.session_state.dt_health_tab_scheduling_state_filter = []
        st.session_state.dt_health_tab_scheduling_state_filter = valid_current_sched_states_local # Update state
        st.multiselect("Scheduling State(s):", options=all_scheduling_states_local, key="dt_health_tab_scheduling_state_filter", default=st.session_state.dt_health_tab_scheduling_state_filter, on_change=persist_local_widget_state, args=("dt_health_tab_scheduling_state_filter",))

    # 7. Local Target Lag (seconds) Filter (Independent)
    with filter_cols_row2_local[2]:
        all_target_lags_raw_local = all_tracking_data_df['TARGET_LAG_SEC'].dropna().unique().tolist() # From original data
        all_target_lags_options_raw_local = ['All'] + sorted(all_target_lags_raw_local)
        selected_target_lag_local = st.session_state.dt_health_tab_target_lag
        valid_current_target_lags_local = [l for l in selected_target_lag_local if l in all_target_lags_options_raw_local]
        if not valid_current_target_lags_local and 'All' in all_target_lags_options_raw_local: st.session_state.dt_health_tab_target_lag = ['All']
        elif not valid_current_target_lags_local: st.session_state.dt_health_tab_target_lag = []
        st.session_state.dt_health_tab_target_lag = valid_current_target_lags_local # Update state
        st.multiselect("Target Lag (seconds):", options=all_target_lags_options_raw_local, key="dt_health_tab_target_lag", default=st.session_state.dt_health_tab_target_lag, format_func=format_target_lag_option_for_display, on_change=persist_local_widget_state, args=("dt_health_tab_target_lag",))

    # 8. Local Display Lag Times In (Independent Radio Button)
    with filter_cols_row2_local[3]:
        all_time_formats_local = ["mixed", "seconds", "minutes", "hours", "days"]
        selected_time_format_local = st.session_state.dt_health_tab_display_lag_times_in
        if selected_time_format_local not in all_time_formats_local: st.session_state.dt_health_tab_display_lag_times_in = 'mixed'
        
        st.radio("Display Lag Times In:", options=all_time_formats_local, key="dt_health_tab_display_lag_times_in", index=all_time_formats_local.index(st.session_state.dt_health_tab_display_lag_times_in), horizontal=True, on_change=persist_local_widget_state, args=("dt_health_tab_display_lag_times_in",))

    st.markdown("---")

    # --- Apply ALL Filters (Global + Local) to initial all_tracking_data_df ---
    final_filtered_data_for_display = all_tracking_data_df.copy()

    # Apply GLOBAL filters first
    global_domain_name_filter = st.session_state.get('global_domain_name', 'All')
    global_sub_domain_name_filter = st.session_state.get('global_sub_domain_name', 'All')
    global_db_filter = st.session_state.get('global_db_filter', 'All')
    global_schema_filter = st.session_state.get('global_schema_filter', 'All')
    global_table_filter = st.session_state.get('global_table_filter', ['All'])
    global_scheduling_state_filter = st.session_state.get('global_scheduling_state_filter', ['All'])
    global_target_lag_filter = st.session_state.get('global_target_lag', ['All'])
    global_is_active_filter = st.session_state.get('global_is_active_filter', 'All')
    # global_display_lag_times_in is used for formatting later, not filtering DF here


    if global_domain_name_filter != 'All':
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['DOMAIN_NAME'] == global_domain_name_filter]
    if global_sub_domain_name_filter != 'All':
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['SUB_DOMAIN_NAME'] == global_sub_domain_name_filter]
    if global_db_filter != 'All':
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['DATABASE_NAME'] == global_db_filter]
    if global_schema_filter != 'All':
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['SCHEMA_NAME'] == global_schema_filter]
    # Check if 'All' is NOT in the list for multiselects to apply filter
    if 'All' not in global_table_filter:
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['TABLE_NAME'].isin(global_table_filter)]
    if 'All' not in global_scheduling_state_filter:
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['LAST_REFRESH_HISTORY_COLLECTION_STATUS'].isin(global_scheduling_state_filter)]
    if 'All' not in global_target_lag_filter:
        global_target_lag_values_numeric = [int(s.replace('s', '')) for s in global_target_lag_filter]
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['TARGET_LAG_SEC'].isin(global_target_lag_values_numeric)]
    if global_is_active_filter != 'All':
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['IS_ACTIVE'] == global_is_active_filter]
    
    # Apply LOCAL filters
    # Apply to the already globally filtered data.
    if st.session_state.dt_health_tab_domain_name != 'All':
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['DOMAIN_NAME'] == st.session_state.dt_health_tab_domain_name]
    if st.session_state.dt_health_tab_sub_domain_name != 'All':
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['SUB_DOMAIN_NAME'] == st.session_state.dt_health_tab_sub_domain_name]
    if st.session_state.dt_health_tab_db_filter != 'All':
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['DATABASE_NAME'] == st.session_state.dt_health_tab_db_filter]
    if st.session_state.dt_health_tab_schema_filter != 'All':
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['SCHEMA_NAME'] == st.session_state.dt_health_tab_schema_filter]
    
    # Multiselect local filters
    if 'All' not in st.session_state.dt_health_tab_table_filter:
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['TABLE_NAME'].isin(st.session_state.dt_health_tab_table_filter)]
    if 'All' not in st.session_state.dt_health_tab_scheduling_state_filter:
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['LAST_REFRESH_HISTORY_COLLECTION_STATUS'].isin(st.session_state.dt_health_tab_scheduling_state_filter)]
    if 'All' not in st.session_state.dt_health_tab_target_lag_filter:
        local_target_lag_values_numeric = [int(s.replace('s', '')) for s in st.session_state.dt_health_tab_target_lag]
        final_filtered_data_for_display = final_filtered_data_for_display[final_filtered_data_for_display['TARGET_LAG_SEC'].isin(local_target_lag_values_numeric)]


    if final_filtered_data_for_display.empty:
        st.info("No tables match the combined global and local filter selections.", icon="ℹ️")
        return

    # Update tracking_data_df to be the final filtered one for KPIs and Charts
    tracking_data_df = final_filtered_data_for_display.copy()


    # ... (KPIs section, Charts section) ...

    # Detailed Table section - use tracking_data_df and relevant display format
    display_df = tracking_data_df.copy()

    # Apply time formatting here based on LOCAL display_lag_times_in
    if 'MEAN_LAG_SEC' in display_df.columns:
        display_df['MEAN_LAG_SEC_FMT'] = format_seconds_to_readable(display_df['MEAN_LAG_SEC'], st.session_state.dt_health_tab_display_lag_times_in)
    if 'MAXIMUM_LAG_SEC' in display_df.columns:
        display_df['MAXIMUM_LAG_SEC_FMT'] = format_seconds_to_readable(display_df['MAXIMUM_LAG_SEC'], st.session_state.dt_health_tab_display_lag_times_in)
    if 'TARGET_LAG_SEC' in display_df.columns:
        display_df['TARGET_LAG_SEC_FMT'] = format_seconds_to_readable(display_df['TARGET_LAG_SEC'], st.session_state.dt_health_tab_display_lag_times_in)


    display_df['LAST_RH_COLLECT_TIME'] = display_df['LAST_REFRESH_HISTORY_COLLECTION_TIMESTAMP'].dt.strftime('%Y-%m-%d %H:%M:%S')
    display_df['LAST_MD_COLLECT_TIME'] = display_df['LAST_METADATA_COLLECTION_TIMESTAMP'].dt.strftime('%Y-%m-%d %H:%M:%S')
    display_df['LATEST_DATA_TIMESTAMP_FMT'] = display_df['LATEST_DATA_TIMESTAMP'].dt.strftime('%Y-%m-%d %H:%M:%S')
    display_df['TRACKING_RECORD_LAST_UPDATED'] = display_df['UPDATED_AT'].dt.strftime('%Y-%m-%d %H:%M:%S')

    display_df = display_df.drop(columns=[
        'LAST_REFRESH_HISTORY_COLLECTION_MESSAGE', 
        'LAST_METADATA_COLLECTION_MESSAGE'
    ], errors='ignore') 

    display_df = display_df.rename(columns={
        'QUALIFIED_NAME': 'Dynamic Table',
        'IS_ACTIVE': 'Active?',
        'TRACK_REFRESH_HISTORY': 'Track RH?',
        'LAST_REFRESH_HISTORY_COLLECTION_STATUS': 'Last RH Status',
        'TRACK_METADATA_SNAPSHOT': 'Track Metadata?',
        'LAST_METADATA_COLLECTION_STATUS': 'Last Metadata Status',
        'LAST_RH_COLLECT_TIME': 'Last RH Collect Time',
        'LAST_MD_COLLECT_TIME': 'Last Metadata Collect Time',
        'LATEST_DATA_TIMESTAMP': 'Latest Data Time',
        'UPDATED_AT': 'Tracking Record Last Updated'
    })

    final_cols_order = [
        'Dynamic Table', 'Active?', 'Track RH?', 'Last RH Collect Time', 'Last RH Status',
        'Track Metadata?', 'Last Metadata Collect Time', 'Last Metadata Status',
        'Latest Data Time', 'MEAN_LAG_SEC_FMT', 'MAXIMUM_LAG_SEC_FMT', 'TARGET_LAG_SEC_FMT',
        'Tracking Record Last Updated'
    ]

    final_display_df = display_df[[col for col in final_cols_order if col in display_df.columns]]

    st.dataframe(final_display_df, use_container_width=True)
