import streamlit as st
import pandas as pd

# Assuming get_snowflake_session() is available from a utils file
# from utils.snowflake_utils import get_snowflake_session

@st.cache_data(ttl=(12*60*60)) # Cache options to avoid re-fetching on every rerun
def get_all_filter_options():
    """Fetches all unique values for filter dropdowns from T_DYNAMIC_TABLE_TRACKING."""
    session = st.session_state.get_snowflake_session()
    TRACKING_TABLE_FQDN = "YOUR_DB.YOUR_SCHEMA.T_DYNAMIC_TABLE_TRACKING"

    query = f"""
    SELECT DISTINCT
        DATABASE_NAME,
        SCHEMA_NAME,
        TABLE_NAME,
        SCHEDULING_STATE_STATUS,
        IS_ACTIVE
    FROM
        {TRACKING_TABLE_FQDN}
    ORDER BY DATABASE_NAME, SCHEMA_NAME, TABLE_NAME, SCHEDULING_STATE_STATUS
    """
    df = session.sql(query).to_pandas()
    return df

def render_filter_canvas_tab():
    st.header("Global Filter Canvas")
    st.write("Set high-level filters here to apply across all relevant dashboard tabs. Each dashboard tab can apply further refinements.")

    # Initialize session state for global filters if they don't exist
    # These keys should be unique and distinct from per-tab filter keys.
    if 'global_db_filter' not in st.session_state:
        st.session_state.global_db_filter = 'All'
    if 'global_schema_filter' not in st.session_state:
        st.session_state.global_schema_filter = 'All'
    if 'global_table_filter' not in st.session_state:
        st.session_state.global_table_filter = ['All']
    if 'global_scheduling_state_filter' not in st.session_state:
        st.session_state.global_scheduling_state_filter = ['All']
    if 'global_is_active_filter' not in st.session_state:
        st.session_state.global_is_active_filter = 'All' # 'All', 'True', 'False'

    # Fetch all possible filter options
    all_options_df = get_all_filter_options()

    if all_options_df.empty:
        st.info("No data available to populate filters. Please check the tracking table.", icon="ℹ️")
        return

    st.markdown("---")
    st.subheader("Master Filters")

    # Filter widgets for Database, Schema, Table, etc.
    # Bind directly to st.session_state for persistence

    filter_cols_row1 = st.columns(3)
    with filter_cols_row1[0]:
        all_databases = ['All'] + sorted(all_options_df['DATABASE_NAME'].unique().tolist())
        selected_db = st.selectbox(
            "Database:",
            options=all_databases,
            key="canvas_db_filter",
            default=st.session_state.global_db_filter # Set default from session state
        )
        # Update session state on change
        st.session_state.global_db_filter = selected_db

    with filter_cols_row1[1]:
        # Schema options depend on selected Database
        schema_options_df = all_options_df.copy()
        if selected_db != 'All':
            schema_options_df = schema_options_df[schema_options_df['DATABASE_NAME'] == selected_db]
        
        all_schemas = ['All'] + sorted(schema_options_df['SCHEMA_NAME'].unique().tolist())
        selected_schema = st.selectbox(
            "Schema:",
            options=all_schemas,
            key="canvas_schema_filter",
            default=st.session_state.global_schema_filter
        )
        st.session_state.global_schema_filter = selected_schema

    with filter_cols_row1[2]:
        # Table options depend on selected Database and Schema
        table_options_df = schema_options_df.copy() # Starts with schema-filtered data
        if selected_schema != 'All':
            table_options_df = table_options_df[table_options_df['SCHEMA_NAME'] == selected_schema]
        
        all_tables = ['All'] + sorted(table_options_df['TABLE_NAME'].unique().tolist())
        selected_tables = st.multiselect(
            "Table(s):",
            options=all_tables,
            key="canvas_table_filter",
            default=st.session_state.global_table_filter
        )
        st.session_state.global_table_filter = selected_tables

    filter_cols_row2 = st.columns(2)
    with filter_cols_row2[0]:
        all_scheduling_states = ['All'] + sorted(all_options_df['SCHEDULING_STATE_STATUS'].unique().tolist())
        selected_sched_state = st.multiselect(
            "Scheduling State(s):",
            options=all_scheduling_states,
            key="canvas_scheduling_state_filter",
            default=st.session_state.global_scheduling_state_filter
        )
        st.session_state.global_scheduling_state_filter = selected_sched_state

    with filter_cols_row2[1]:
        all_active_states = ['All', 'True', 'False']
        selected_active_state = st.selectbox(
            "Is Active:",
            options=all_active_states,
            key="canvas_is_active_filter",
            default=st.session_state.global_is_active_filter
        )
        st.session_state.global_is_active_filter = selected_active_state

    st.markdown("---")
    st.info("These filters will be automatically applied as a first level of filtering on relevant dashboard tabs.", icon="ℹ️")

# End of tabs/filter_canvas.py
