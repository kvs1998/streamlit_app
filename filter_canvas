import streamlit as st
import pandas as pd
# Assuming you have init_connection and run_query functions defined
# from the previous comprehensive example, and secrets.toml is set up.

# Dummy data for demonstration (simulating results from Snowflake query)
data = {
    'DOMAIN_NAME': ['EFRONT', 'EFRONT', 'EFRONT', 'EFRONT', 'EFRONT', 'EFRONT', 'EFRONT', 'EFRONT', 'EFRONT'],
    'SUB_DOMAIN_NAME': ['REF', 'REF', 'REF', 'REF', 'REF', 'REF', 'REF', 'REF', 'REF'],
    'DATABASE_NAME': ['EDP_ADC_SDM_DB', 'EDP_ADC_SDM_DB', 'EDP_ADC_SDM_DB', 'EDP_ADC_SDM_DB', 'EDP_ADC_SDM_DB', 'EDP_ADC_SDM_DB', 'EDP_ADC_SDM_DB', 'EDP_ADC_SDM_DB', 'EDP_ADC_SDM_DB'],
    'SCHEMA_NAME': ['ADC_SDM_EFRONT', 'ADC_SDM_EFRONT', 'ADC_SDM_EFRONT', 'ADC_SDM_EFRONT', 'ADC_SDM_EFRONT', 'ADC_SDM_EFRONT', 'ADC_SDM_EFRONT', 'ADC_SDM_EFRONT', 'ADC_SDM_EFRONT'],
    'TABLE_NAME': [
        'T_REF_EFRONT_BENCHMARK',
        'T_REF_EFRONT_BENCHMARK_EXT',
        'T_REF_EFRONT_BUSINESS_RISK',
        'T_REF_EFRONT_CLASSIFICATION',
        'T_REF_EFRONT_COMPANY',
        'T_REF_EFRONT_COMPANY_EXT',
        'T_REF_EFRONT_CORPORATE_CLASS',
        'T_REF_EFRONT_COUNTRY',
        'T_REF_EFRONT_DEAL_INSTRUMENT'
    ],
    'SCHEDULING_STATE_STATUS': ['SUCCESS'] * 9,
    'TARGET_LAG_SEC_FMT': ['120s'] * 9
}
df_tables = pd.DataFrame(data)

st.set_page_config(layout="wide", page_title="Snowflake Table Action Selector")
st.title("❄️ Snowflake Table Action Selector")

st.info(
    "These filters will be automatically applied as a first level of filtering "
    "on relevant dashboard tabs."
)

# --- Initialize new selection columns in DataFrame ---
if 'SNAPSHOT_SELECT' not in df_tables.columns:
    df_tables['SNAPSHOT_SELECT'] = False
if 'REFRESH_HISTORY_SELECT' not in df_tables.columns:
    df_tables['REFRESH_HISTORY_SELECT'] = False

# --- Filters Section (Sidebar - simplified for this example) ---
st.sidebar.header("Filter Tables (Pre-selection)")
# For this demo, we'll use a session state variable to mimic a filtered DataFrame
# In your actual app, this would be populated by the 'Apply Filters / Load Tables' button.
if 'filtered_tables' not in st.session_state:
    st.session_state['filtered_tables'] = df_tables.copy() # Load initial dummy data

st.subheader(
    f"Select Tables for Actions ({len(st.session_state['filtered_tables'])} total)"
)

# Define column configurations for st.data_editor
column_configurations = {
    "SNAPSHOT_SELECT": st.column_config.CheckboxColumn(
        "Take Snapshot",
        help="Check to take a snapshot of this table",
        default=False,
        disabled=False
    ),
    "REFRESH_HISTORY_SELECT": st.column_config.CheckboxColumn(
        "Refresh History",
        help="Check to refresh history for this table",
        default=False,
        disabled=False
    ),
    "DOMAIN_NAME": st.column_config.TextColumn("Domain", disabled=True),
    "SUB_DOMAIN_NAME": st.column_config.TextColumn("Sub-Domain", disabled=True),
    "DATABASE_NAME": st.column_config.TextColumn("Database", disabled=True),
    "SCHEMA_NAME": st.column_config.TextColumn("Schema", disabled=True),
    "TABLE_NAME": st.column_config.TextColumn("Table Name", disabled=True),
    "SCHEDULING_STATE_STATUS": st.column_config.TextColumn("Status", disabled=True),
    "TARGET_LAG_SEC_FMT": st.column_config.TextColumn("Lag", disabled=True),
}

# Define the order of columns explicitly
display_columns_order = [
    "SNAPSHOT_SELECT",
    "REFRESH_HISTORY_SELECT",
    "DOMAIN_NAME",
    "SUB_DOMAIN_NAME",
    "DATABASE_NAME",
    "SCHEMA_NAME",
    "TABLE_NAME",
    "SCHEDULING_STATE_STATUS",
    "TARGET_LAG_SEC_FMT"
]

# Use the DataFrame from session state for the editor
edited_df = st.data_editor(
    st.session_state['filtered_tables'][display_columns_order],
    column_config=column_configurations,
    hide_index=True,
    use_container_width=True,
    key="table_action_editor"
)

# Update the session state DataFrame with the edits
st.session_state['filtered_tables'] = edited_df

# --- Process Selections ---
# Calculate total number of tables in the *filtered* view
total_filtered_tables = len(st.session_state['filtered_tables'])

# Find tables selected for Snapshot
snapshot_selected_df = edited_df[edited_df['SNAPSHOT_SELECT'] == True]
num_snapshot_selected = len(snapshot_selected_df)

# Find tables selected for Refresh History
refresh_history_selected_df = edited_df[edited_df['REFRESH_HISTORY_SELECT'] == True]
num_refresh_history_selected = len(refresh_history_selected_df)

# Display selections and prepare for actions
if num_snapshot_selected > 0 or num_refresh_history_selected > 0:
    st.markdown("---")
    st.subheader("Selected Tables for Action:")

    if num_snapshot_selected > 0:
        st.write(
            f"Tables selected for **Snapshot** ({num_snapshot_selected} out of {total_filtered_tables}):"
        )
        st.dataframe(
            snapshot_selected_df[['DATABASE_NAME', 'SCHEMA_NAME', 'TABLE_NAME']],
            hide_index=True
        )
        snapshot_tables_full_names = [
            f'"{row["DATABASE_NAME"]}"."{row["SCHEMA_NAME"]}"."{row["TABLE_NAME"]}"'
            for index, row in snapshot_selected_df.iterrows()
        ]
        st.code(snapshot_tables_full_names)

    if num_refresh_history_selected > 0:
        st.write(
            f"Tables selected for **Refresh History** ({num_refresh_history_selected} out of {total_filtered_tables}):"
        )
        st.dataframe(
            refresh_history_selected_df[['DATABASE_NAME', 'SCHEMA_NAME', 'TABLE_NAME']],
            hide_index=True
        )
        refresh_history_tables_full_names = [
            f'"{row["DATABASE_NAME"]}"."{row["SCHEMA_NAME"]}"."{row["TABLE_NAME"]}"'
            for index, row in refresh_history_selected_df.iterrows()
        ]
        st.code(refresh_history_tables_full_names)

    # --- Action Buttons ---
    st.markdown("---")
    col_action1, col_action2 = st.columns(2)

    with col_action1:
        if st.button("Execute Snapshot Action", disabled=(num_snapshot_selected == 0)):
            st.success(f"Initiating Snapshot for {num_snapshot_selected} tables.")

    with col_action2:
        if st.button("Execute Refresh History Action", disabled=(num_refresh_history_selected == 0)):
            st.success(f"Initiating Refresh History for {num_refresh_history_selected} tables.")

else:
    st.info("Select tables using the 'Take Snapshot' or 'Refresh History' checkboxes.")

st.markdown("---")
st.markdown("Developed by T3 Chat for Data Engineers 🤖")
