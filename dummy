        BEGIN -- Inner BEGIN/END block for per-table ASYNC job submission error handling
            lv_message := lv_message || '  Submitting jobs for table: ' || lv_qualified_name || '\n';

            -- Launch SP_COLLECT_DT_REFRESH_HISTORY ASYNC
            -- Pass data staging table and NEW tracking staging table
            IF (lv_track_refresh_history) THEN
                ASYNC (
                    CALL IDENTIFIER(:LV_REFRESH_HISTORY_PROC_FQDN)(
                        :lv_db_name, :lv_schema_name, :lv_table_name, :lv_refresh_history_days,
                        :lv_refresh_history_staging_table_fqdn, :lv_tracking_update_staging_table_fqdn, :lv_driver_run_uuid
                    )
                );
                lv_jobs_launched_count := lv_jobs_launched_count + 1;
                lv_current_batch_count := lv_current_batch_count + 1; -- Increment batch counter
                lv_message := lv_message || '    Refresh History job submitted ASYNC.\n';
            END IF;

            -- Launch SP_COLLECT_DYNAMIC_TABLE_METADATA ASYNC
            -- Pass data staging table and NEW tracking staging table
            IF (lv_track_metadata_snapshot) THEN
                ASYNC (
                    CALL IDENTIFIER(:LV_METADATA_PROC_FQDN)(
                        :lv_db_name, :lv_schema_name, :lv_table_name,
                        :lv_metadata_staging_table_fqdn, :lv_tracking_update_staging_table_fqdn, :lv_driver_run_uuid
                    )
                );
                lv_jobs_launched_count := lv_jobs_launched_count + 1;
                lv_current_batch_count := lv_current_batch_count + 1; -- Increment batch counter
                lv_message := lv_message || '    Metadata Snapshot job submitted ASYNC.\n';
            END IF;

            -- Add logic for TRACK_GRAPH_HISTORY if you implement that procedure later

            -- NEW: Check if current batch size is reached.
            -- Await all jobs submitted *since the last AWAIT ALL*
            IF (P_ASYNC_BATCH_SIZE > 0 AND lv_current_batch_count >= P_ASYNC_BATCH_SIZE) THEN
                lv_message := lv_message || '    Batch limit reached (' || P_ASYNC_BATCH_SIZE || '). Awaiting batch completion...\n';
                AWAIT ALL; -- Wait for the current batch to complete
                lv_message := lv_message || '    Batch completed.\n';
                lv_current_batch_count := 0; -- Reset batch counter
            END IF;

        EXCEPTION
            WHEN OTHER THEN
                lv_loop_error_message := 'ERROR submitting ASYNC job(s) for ' || lv_qualified_name || ': ' || SQLERRM();
                lv_message := lv_message || '    ' || lv_loop_error_message || '\n';
                -- If submission fails, log this direct submission error into the tracking staging table
                -- We insert for both types for comprehensive logging, as ASYNC submission error affects both potential jobs.
                EXECUTE IMMEDIATE '
                    INSERT INTO IDENTIFIER(?) (
                        QUALIFIED_NAME, JOB_TYPE, STATUS, MESSAGE, COLLECTION_TIMESTAMP, DRIVER_RUN_UUID
                    ) VALUES (?, ?, ?, ?, ?, ?);
                ' USING lv_tracking_update_staging_table_fqdn, lv_qualified_name, 'REFRESH_HISTORY', 'FAILED_SUBMISSION', :lv_loop_error_message, CURRENT_TIMESTAMP(), lv_driver_run_uuid;
                 EXECUTE IMMEDIATE '
                    INSERT INTO IDENTIFIER(?) (
                        QUALIFIED_NAME, JOB_TYPE, STATUS, MESSAGE, COLLECTION_TIMESTAMP, DRIVER_RUN_UUID
                    ) VALUES (?, ?, ?, ?, ?, ?);
                ' USING lv_tracking_update_staging_table_fqdn, lv_qualified_name, 'METADATA_SNAPSHOT', 'FAILED_SUBMISSION', :lv_loop_error_message, CURRENT_TIMESTAMP(), lv_driver_run_uuid;
        END;
    END LOOP;

    -- NEW: AWAIT ALL for any remaining jobs from the last (incomplete) batch
    IF (lv_current_batch_count > 0) THEN
        lv_message := lv_message || 'Last batch (partial) submitted. Awaiting remaining jobs...\n';
        AWAIT ALL;
        lv_message := lv_message || 'Remaining jobs completed.\n';
    END IF;
