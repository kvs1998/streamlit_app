-- Main Driver Stored Procedure - Orchestrates collection for all tracked tables
-- REVISED to rely entirely on P_TRACKING_STAGING_TABLE_FQDN for audit and failure detection
-- Replace YOUR_DB and YOUR_SCHEMA.

CREATE OR REPLACE PROCEDURE YOUR_DB.YOUR_SCHEMA.SP_DRIVE_ALL_DT_COLLECTION(
    P_ASYNC_BATCH_SIZE NUMBER -- Parameter for controlling ASYNC concurrency
)
RETURNS VARIANT -- Returns JSON object for structured audit
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
    -- --- Configuration Variables ---
    LV_TRACKING_TABLE_FQDN VARCHAR := 'YOUR_DB.YOUR_SCHEMA.T_DYNAMIC_TABLE_TRACKING';
    LV_REFRESH_HISTORY_PROC_FQDN VARCHAR := 'YOUR_DB.YOUR_SCHEMA.SP_COLLECT_DT_REFRESH_HISTORY';
    LV_METADATA_PROC_FQDN VARCHAR := 'YOUR_DB.YOUR_SCHEMA.SP_COLLECT_DYNAMIC_TABLE_METADATA';
    LV_FINAL_HISTORY_TABLE_FQDN VARCHAR := 'YOUR_DB.YOUR_SCHEMA.T_DYNAMIC_TABLE_REFRESH_HISTORY_FLAT';
    LV_FINAL_METADATA_TABLE_FQDN VARCHAR := 'YOUR_DB.YOUR_SCHEMA.T_DYNAMIC_TABLE_METADATA_LATEST_SNAPSHOT';

    -- --- Internal Variables ---
    lv_message VARCHAR DEFAULT '';
    lv_total_tables_found INTEGER DEFAULT 0;
    lv_jobs_launched_count INTEGER DEFAULT 0; -- Count of ASYNC calls submitted
    lv_overall_success_count INTEGER DEFAULT 0; -- Based on tracking table at end
    lv_overall_fail_count INTEGER DEFAULT 0;    -- Based on tracking table at end
    lv_db_name VARCHAR;
    lv_schema_name VARCHAR;
    lv_table_name VARCHAR;
    lv_qualified_name VARCHAR;
    lv_track_refresh_history BOOLEAN;
    lv_track_metadata_snapshot BOOLEAN;
    lv_track_graph_history BOOLEAN;
    lv_refresh_history_days NUMBER;
    lv_metadata_days NUMBER;
    lv_loop_error_message VARCHAR;
    lv_error_message_overall VARCHAR;

    lv_driver_run_start_time TIMESTAMP_LTZ;
    lv_driver_run_uuid VARCHAR := UUID_STRING();

    -- --- Staging Table Variables ---
    lv_refresh_history_staging_table_name VARCHAR;
    lv_refresh_history_staging_table_fqdn VARCHAR;
    lv_metadata_staging_table_name VARCHAR;
    lv_metadata_staging_table_fqdn VARCHAR;

    lv_tracking_update_staging_table_name VARCHAR;
    lv_tracking_update_staging_table_fqdn VARCHAR;

    -- --- Batching Variables ---
    lv_current_batch_submissions INTEGER DEFAULT 0;

    -- --- Consistency Flag ---
    lv_any_async_job_reported_failure BOOLEAN DEFAULT FALSE;
    lv_driver_overall_status VARCHAR;

    -- --- Timing Variables ---
    lv_async_launch_start_time TIMESTAMP_LTZ;
    lv_async_launch_end_time TIMESTAMP_LTZ;
    lv_async_await_start_time TIMESTAMP_LTZ;
    lv_async_await_end_time TIMESTAMP_LTZ;
    lv_merges_start_time TIMESTAMP_LTZ;
    lv_merges_end_time TIMESTAMP_LTZ;

    -- --- Audit Details List ---
    lv_job_audit_details ARRAY DEFAULT [];

    -- Cursor to select active tables needing collection
    c_tables CURSOR FOR
        SELECT
            DATABASE_NAME, SCHEMA_NAME, TABLE_NAME, QUALIFIED_NAME,
            TRACK_REFRESH_HISTORY, TRACK_METADATA_SNAPSHOT, TRACK_GRAPH_HISTORY,
            COLLECT_REFRESH_HISTORY_DAYS, COLLECT_METADATA_DAYS
        FROM IDENTIFIER(:LV_TRACKING_TABLE_FQDN)
        WHERE IS_ACTIVE = TRUE;

BEGIN
    lv_driver_run_start_time := CURRENT_TIMESTAMP();
    lv_message := lv_message || 'Starting DYNAMIC TABLE COLLECTION DRIVER (UUID: ' || lv_driver_run_uuid || ') at ' || lv_driver_run_start_time || '\n';
    lv_driver_overall_status := 'FAILED_OVERALL';

    -- --- Step 1: Create Global Temporary Staging Tables (Once per driver run) ---
    lv_refresh_history_staging_table_name := 'T_REFRESH_HISTORY_STAGE_' || REPLACE(UUID_STRING(), '-', '');
    lv_refresh_history_staging_table_fqdn := 'YOUR_DB.YOUR_SCHEMA.' || lv_refresh_history_staging_table_name;
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TEMPORARY TABLE ' || :lv_refresh_history_staging_table_fqdn || ' LIKE ' || :LV_FINAL_HISTORY_TABLE_FQDN || ';';
    lv_message := lv_message || 'Created temporary history staging table: ' || lv_refresh_history_staging_table_fqdn || '\n';

    lv_metadata_staging_table_name := 'T_METADATA_STAGE_' || REPLACE(UUID_STRING(), '-', '');
    lv_metadata_staging_table_fqdn := 'YOUR_DB.YOUR_SCHEMA.' || lv_metadata_staging_table_name;
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TEMPORARY TABLE ' || :lv_metadata_staging_table_fqdn || ' LIKE ' || :LV_FINAL_METADATA_TABLE_FQDN || ';';
    lv_message := lv_message || 'Created temporary metadata staging table: ' || lv_metadata_staging_table_fqdn || '\n';

    lv_tracking_update_staging_table_name := 'T_TRACKING_UPDATE_STAGE_' || REPLACE(UUID_STRING(), '-', '');
    lv_tracking_update_staging_table_fqdn := 'YOUR_DB.YOUR_SCHEMA.' || lv_tracking_update_staging_table_name;
    EXECUTE IMMEDIATE 'CREATE OR REPLACE TEMPORARY TABLE ' || :lv_tracking_update_staging_table_fqdn || ' (
        QUALIFIED_NAME VARCHAR,
        JOB_TYPE VARCHAR,
        STATUS VARCHAR,
        MESSAGE VARCHAR,
        COLLECTION_TIMESTAMP TIMESTAMP_LTZ,
        DRIVER_RUN_UUID VARCHAR
    );';
    lv_message := lv_message || 'Created temporary tracking update staging table: ' || lv_tracking_update_staging_table_fqdn || '\n';


    -- --- Step 2: Launch ASYNC collection jobs for each table in batches ---
    lv_async_launch_start_time := CURRENT_TIMESTAMP();
    FOR record_row IN c_tables DO
        lv_total_tables_found := lv_total_tables_found + 1;

        lv_db_name := record_row.DATABASE_NAME;
        lv_schema_name := record_row.SCHEMA_NAME;
        lv_table_name := record_row.TABLE_NAME;
        lv_qualified_name := record_row.QUALIFIED_NAME;
        lv_track_refresh_history := record_row.TRACK_REFRESH_HISTORY;
        lv_track_metadata_snapshot := record_row.TRACK_METADATA_SNAPSHOT;
        lv_track_graph_history := record_row.TRACK_GRAPH_HISTORY;
        lv_refresh_history_days := record_row.COLLECT_REFRESH_HISTORY_DAYS;
        lv_metadata_days := record_row.COLLECT_METADATA_DAYS;

        DECLARE
            job_status_on_submit VARCHAR;
            job_message_on_submit VARCHAR;
        BEGIN
            lv_message := lv_message || '  Submitting jobs for table: ' || lv_qualified_name || '\n';
            job_status_on_submit := 'SUBMITTED';
            job_message_on_submit := 'ASYNC job submitted successfully.';

            IF (lv_track_refresh_history) THEN
                BEGIN
                    ASYNC (
                        CALL IDENTIFIER(:LV_REFRESH_HISTORY_PROC_FQDN)(
                            :lv_db_name, :lv_schema_name, :lv_table_name, :lv_refresh_history_days,
                            :lv_refresh_history_staging_table_fqdn, :lv_tracking_update_staging_table_fqdn, :lv_driver_run_uuid
                        )
                    );
                    lv_jobs_launched_count := lv_jobs_launched_count + 1;
                    lv_current_batch_submissions := lv_current_batch_submissions + 1;
                    lv_message := lv_message || '    Refresh History job submitted ASYNC.\n';
                EXCEPTION
                    WHEN OTHER THEN
                        job_status_on_submit := 'FAILED_SUBMISSION';
                        job_message_on_submit := 'ERROR submitting Refresh History ASYNC job: ' || SQLERRM();
                        lv_message := lv_message || '    ' || job_message_on_submit || '\n';
                        lv_any_async_job_reported_failure := TRUE;
                END;
                EXECUTE IMMEDIATE '
                    INSERT INTO IDENTIFIER(?) (
                        QUALIFIED_NAME, JOB_TYPE, STATUS, MESSAGE, COLLECTION_TIMESTAMP, DRIVER_RUN_UUID
                    ) VALUES (?, ?, ?, ?, ?);
                ' USING lv_tracking_update_staging_table_fqdn, lv_qualified_name, 'REFRESH_HISTORY', job_status_on_submit, job_message_on_submit, CURRENT_TIMESTAMP(), lv_driver_run_uuid;
            END IF;

            job_status_on_submit := 'SUBMITTED';
            job_message_on_submit := 'ASYNC job submitted successfully.';
            IF (lv_track_metadata_snapshot) THEN
                BEGIN
                    ASYNC (
                        CALL IDENTIFIER(:LV_METADATA_PROC_FQDN)(
                            :lv_db_name, :lv_schema_name, :lv_table_name,
                            :lv_metadata_staging_table_fqdn, :lv_tracking_update_staging_table_fqdn, :lv_driver_run_uuid
                        )
                    );
                    lv_jobs_launched_count := lv_jobs_launched_count + 1;
                    lv_current_batch_submissions := lv_current_batch_submissions + 1;
                    lv_message := lv_message || '    Metadata Snapshot job submitted ASYNC.\n';
                EXCEPTION
                    WHEN OTHER THEN
                        job_status_on_submit := 'FAILED_SUBMISSION';
                        job_message_on_submit := 'ERROR submitting Metadata ASYNC job: ' || SQLERRM();
                        lv_message := lv_message || '    ' || job_message_on_submit || '\n';
                        lv_any_async_job_reported_failure := TRUE;
                END;
                EXECUTE IMMEDIATE '
                    INSERT INTO IDENTIFIER(?) (
                        QUALIFIED_NAME, JOB_TYPE, STATUS, MESSAGE, COLLECTION_TIMESTAMP, DRIVER_RUN_UUID
                    ) VALUES (?, ?, ?, ?, ?);
                ' USING lv_tracking_update_staging_table_fqdn, lv_qualified_name, 'METADATA_SNAPSHOT', job_status_on_submit, job_message_on_submit, CURRENT_TIMESTAMP(), lv_driver_run_uuid;
            END IF;

            -- Check if current batch size is reached.
            IF (P_ASYNC_BATCH_SIZE > 0 AND lv_current_batch_submissions >= P_ASYNC_BATCH_SIZE) THEN
                lv_message := lv_message || '    Batch limit reached (' || P_ASYNC_BATCH_SIZE || '). Awaiting batch completion...\n';
                lv_async_await_start_time := COALESCE(lv_async_await_start_time, CURRENT_TIMESTAMP());
                BEGIN
                    AWAIT ALL;
                    lv_async_await_end_time := CURRENT_TIMESTAMP();
                    lv_message := lv_message || '    Batch completed successfully in ' || DATEDIFF('millisecond', lv_async_await_start_time, lv_async_await_end_time) / 1000 || 's.\n';
                EXCEPTION
                    WHEN OTHER THEN
                        lv_any_async_job_reported_failure := TRUE;
                        lv_loop_error_message := 'ERROR awaiting ASYNC batch completion: ' || SQLERRM();
                        lv_message := lv_message || '    ' || lv_loop_error_message || '\n';
                        lv_async_await_end_time := CURRENT_TIMESTAMP();
                END;
                lv_current_batch_submissions := 0;
            END IF;

        EXCEPTION
            WHEN OTHER THEN
                lv_loop_error_message := 'UNEXPECTED ERROR during ASYNC job submission/batch management for ' || lv_qualified_name || ': ' || SQLERRM();
                lv_message := lv_message || '    ' || lv_loop_error_message || '\n';
                lv_any_async_job_reported_failure := TRUE;
        END;
    END LOOP;
    lv_async_launch_end_time := CURRENT_TIMESTAMP();

    -- AWAIT ALL for any remaining jobs from the last (incomplete) batch
    IF (lv_current_batch_submissions > 0) THEN
        lv_message := lv_message || 'Last batch (partial) submitted. Awaiting remaining jobs...\n';
        lv_async_await_start_time := COALESCE(lv_async_await_start_time, CURRENT_TIMESTAMP());
        BEGIN
            AWAIT ALL;
            lv_async_await_end_time := CURRENT_TIMESTAMP();
            lv_message := lv_message || 'Remaining jobs completed successfully in ' || DATEDIFF('millisecond', lv_async_await_start_time, lv_async_await_end_time) / 1000 || 's.\n';
        EXCEPTION
            WHEN OTHER THEN
                lv_any_async_job_reported_failure := TRUE;
                lv_loop_error_message := 'ERROR awaiting final ASYNC batch completion: ' || SQLERRM();
                lv_message := lv_message || '    ' || lv_loop_error_message || '\n';
                lv_async_await_end_time := CURRENT_TIMESTAMP();
        END;
    END IF;

    -- --- CRITICAL: Capture end time of ASYNC processing phase ---
    lv_driver_run_end_time := CURRENT_TIMESTAMP();

    lv_message := lv_message || 'All ASYNC jobs completion process finalized. Checking overall status...\n';

    -- --- STEP: Consolidate ASYNC Job Statuses from TRACKING STAGING TABLE ---
    -- This provides the definitive audit trail for this driver run, as reported by children.
    lv_message := lv_message || 'Consolidating ASYNC job statuses from tracking staging table...\n';
    
    DECLARE
        c_tracking_results CURSOR FOR
            SELECT QUALIFIED_NAME, JOB_TYPE, STATUS, MESSAGE
            FROM IDENTIFIER(:lv_tracking_update_staging_table_fqdn)
            WHERE DRIVER_RUN_UUID = :lv_driver_run_uuid
            ORDER BY QUALIFIED_NAME, JOB_TYPE;
        
        job_status VARCHAR;
        job_message VARCHAR;
        table_job_details_map OBJECT DEFAULT OBJECT_CONSTRUCT(); -- Intermediate map to build JSON per qualified_name
        table_overall_status VARCHAR;
    BEGIN
        FOR tracking_record IN c_tracking_results DO
            job_status := tracking_record.STATUS;
            job_message := tracking_record.MESSAGE;

            IF (job_status != 'SUCCESS') THEN
                lv_any_async_job_reported_failure := TRUE;
                lv_message := lv_message || '  JOB STATUS: ' || tracking_record.QUALIFIED_NAME || ' (' || tracking_record.JOB_TYPE || ') -> FAILED: ' || job_message || '\n';
            ELSE
                lv_message := lv_message || '  JOB STATUS: ' || tracking_record.QUALIFIED_NAME || ' (' || tracking_record.JOB_TYPE || ') -> SUCCESS: ' || job_message || '\n';
            END IF;

            -- Build the nested job_details object for each qualified_name
            DECLARE
                current_job_details OBJECT DEFAULT GET(table_job_details_map, tracking_record.QUALIFIED_NAME);
            BEGIN
                IF (current_job_details IS NULL) THEN
                    current_job_details := OBJECT_CONSTRUCT();
                END IF;

                -- Insert (or update) the job type's status
                -- NEW: Conditionally include 'message' only for non-SUCCESS statuses
                current_job_details := OBJECT_INSERT(
                    current_job_details,
                    tracking_record.JOB_TYPE,
                    CASE WHEN job_status = 'SUCCESS' THEN OBJECT_CONSTRUCT('status', job_status)
                         ELSE OBJECT_CONSTRUCT('status', job_status, 'message', job_message)
                    END,
                    TRUE -- Overwrite if key exists
                );

                table_job_details_map := OBJECT_INSERT(table_job_details_map, tracking_record.QUALIFIED_NAME, current_job_details, TRUE);
            END;
        END FOR;

        -- Now, iterate through the consolidated map to build the final lv_job_audit_details array
        FOR qualified_name_key IN (SELECT KEY FROM TABLE(FLATTEN(input => table_job_details_map))) DO
            DECLARE
                q_name VARCHAR := qualified_name_key.KEY;
                job_details OBJECT := GET(table_job_details_map, q_name);
                
                refresh_history_status VARCHAR := GET(GET(job_details, 'REFRESH_HISTORY'), 'status');
                metadata_snapshot_status VARCHAR := GET(GET(job_details, 'METADATA_SNAPSHOT'), 'status');
            BEGIN
                -- Determine overall_table_status for each table
                -- Logic: If any critical failure, overall FAILED. If some success, some untracked, PARTIAL. Else SUCCESS.
                IF (refresh_history_status = 'FAILED_SUBMISSION' OR refresh_history_status = 'FAILED_EXECUTION' OR refresh_history_status = 'FAILED_INPUT' OR
                    metadata_snapshot_status = 'FAILED_SUBMISSION' OR metadata_snapshot_status = 'FAILED_EXECUTION' OR metadata_snapshot_status = 'FAILED_INPUT') THEN
                    table_overall_status := 'FAILED';
                ELSIF (
                    (refresh_history_status = 'SUCCESS' OR refresh_history_status IS NULL) AND
                    (metadata_snapshot_status = 'SUCCESS' OR metadata_snapshot_status IS NULL)
                ) THEN
                    -- If all *tracked* jobs succeeded, but not necessarily all possible jobs ran.
                    -- If both are SUCCESS, it's SUCCESS. If one is SUCCESS and other NULL, it's PARTIAL.
                    IF (refresh_history_status = 'SUCCESS' AND metadata_snapshot_status = 'SUCCESS') THEN
                        table_overall_status := 'SUCCESS';
                    ELSE
                        table_overall_status := 'PARTIAL_SUCCESS';
                    END IF;
                ELSE -- Mixed results or unexpected statuses
                    table_overall_status := 'MIXED_STATUS'; -- Or fall through to FAILED if no other category
                END IF;

                lv_job_audit_details := ARRAY_APPEND(:lv_job_audit_details, OBJECT_CONSTRUCT(
                    'qualified_name', q_name,
                    'job_details', job_details, -- Contains status and conditional message for each job type
                    'overall_table_status', table_overall_status
                ));
            END;
        END FOR;

    END;
    lv_message := lv_message || 'ASYNC job status consolidation complete. Audit details prepared.\n';


    IF (lv_any_async_job_reported_failure) THEN
        lv_message := lv_message || 'FAILURE DETECTED: One or more ASYNC jobs reported non-SUCCESS status. Skipping merges to main tables and rolling back.\n';
    ELSE
        lv_message := lv_message || 'All ASYNC jobs reported SUCCESS. Proceeding with merges.\n';
    END IF;

    -- --- Step 3: Conditional Merges based on overall success ---
    BEGIN TRANSACTION;

    IF (NOT lv_any_async_job_reported_failure) THEN
        lv_merges_start_time := CURRENT_TIMESTAMP();

        -- MERGE Refresh History Data
        BEGIN
            lv_message := lv_message || '  Merging Refresh History from staging to ' || LV_FINAL_HISTORY_TABLE_FQDN || '\n';
            EXECUTE IMMEDIATE '
                MERGE INTO IDENTIFIER(:1) AS target_table
                USING IDENTIFIER(:2) AS source_data
                ON target_table.QUALIFIED_NAME = source_data.QUALIFIED_NAME
                AND target_table.QUERY_ID = source_data.QUERY_ID
                WHEN MATCHED THEN
                    UPDATE SET
                        target_table.STATE = source_data.STATE,
                        target_table.STATE_CODE = source_data.STATE_CODE,
                        target_table.STATE_MESSAGE = source_data.STATE_MESSAGE,
                        target_table.REFRESH_END_TIME = source_data.REFRESH_END_TIME,
                        target_table.NUMINSERTEDROWS = source_data.NUMINSERTEDROWS,
                        target_table.NUMDELETEDROWS = source_data.NUMDELETEDROWS,
                        target_table.NUMCOPIEDROWS = source_data.NUMCOPIEDROWS,
                        target_table.NUMADDEDPARTITIONS = source_data.NUMADDEDPARTITIONS,
                        target_table.NUMREMOVEDPARTITIONS = source_data.NUMREMOVEDPARTITIONS,
                        target_table.REFRESH_ACTION = source_data.REFRESH_ACTION,
                        target_table.REFRESH_TRIGGER = source_data.REFRESH_TRIGGER
                WHEN NOT MATCHED THEN
                    INSERT (
                        DATABASE_NAME, SCHEMA_NAME, TABLE_NAME, QUALIFIED_NAME,
                        STATE, STATE_CODE, STATE_MESSAGE, QUERY_ID, DATA_TIMESTAMP,
                        REFRESH_START_TIME, REFRESH_END_TIME, COMPLETION_TARGET,
                        LAST_COMPLETED_DEPENDENCY_QUALIFIED_NAME, LAST_COMPLETED_DEPENDENCY_DATA_TIMESTAMP,
                        NUMINSERTEDROWS, NUMDELETEDROWS, NUMCOPIEDROWS, NUMADDEDPARTITIONS, NUMREMOVEDPARTITIONS,
                        REFRESH_ACTION, REFRESH_TRIGGER, TARGET_LAG_SEC, GRAPH_HISTORY_VALID_FROM
                    )
                    VALUES (
                        source_data.DATABASE_NAME, source_data.SCHEMA_NAME, source_data.TABLE_NAME, source_data.QUALIFIED_NAME,
                        source_data.STATE, source_data.STATE_CODE, source_data.STATE_MESSAGE, source_data.QUERY_ID, source_data.DATA_TIMESTAMP,
                        source_data.REFRESH_START_TIME, source_data.REFRESH_END_TIME, source_data.COMPLETION_TARGET,
                        source_data.LAST_COMPLETED_DEPENDENCY_QUALIFIED_NAME, source_data.LAST_COMPLETED_DEPENDENCY_DATA_TIMESTAMP,
                        source_data.NUMINSERTEDROWS, source_data.NUMDELETEDROWS, source_data.NUMCOPIEDROWS, source_data.NUMADDEDPARTITIONS, source_data.NUMREMOVEDPARTITIONS,
                        source_data.REFRESH_ACTION, source_data.REFRESH_TRIGGER, source_data.TARGET_LAG_SEC, source_data.GRAPH_HISTORY_VALID_FROM
                    );
            ' USING LV_FINAL_HISTORY_TABLE_FQDN, lv_refresh_history_staging_table_fqdn;
            lv_message := lv_message || '  Refresh History merge complete.\n';
        EXCEPTION
            WHEN OTHER THEN
                lv_loop_error_message := 'ERROR merging Refresh History: ' || SQLERRM();
                lv_message := lv_message || '    ' || lv_loop_error_message || '\n';
                lv_any_async_job_reported_failure := TRUE;
        END;

        -- MERGE Metadata Snapshot Data
        BEGIN
            lv_message := lv_message || '  Merging Metadata Snapshot from staging to ' || LV_FINAL_METADATA_TABLE_FQDN || '\n';
            EXECUTE IMMEDIATE '
                MERGE INTO IDENTIFIER(:1) AS target_table
                USING IDENTIFIER(:2) AS source_data
                ON target_table.QUALIFIED_NAME = source_data.QUALIFIED_NAME
                WHEN MATCHED THEN
                    UPDATE SET
                        target_table.COLLECTION_TIMESTAMP = source_data.COLLECTION_TIMESTAMP,
                        target_table.DATABASE_NAME = source_data.DATABASE_NAME,
                        target_table.SCHEMA_NAME = source_data.SCHEMA_NAME,
                        target_table.TABLE_NAME = source_data.TABLE_NAME,
                        target_table.TARGET_LAG_SEC = source_data.TARGET_LAG_SEC,
                        target_table.TARGET_LAG_TYPE = source_data.TARGET_LAG_TYPE,
                        target_table.SCHEDULING_STATE_STATUS = source_data.SCHEDULING_STATE_STATUS,
                        target_table.SCHEDULING_STATE_REASON_CODE = source_data.SCHEDULING_STATE_REASON_CODE,
                        target_table.SCHEDULING_STATE_REASON_MESSAGE = source_data.SCHEDULING_STATE_REASON_MESSAGE,
                        target_table.SCHEDULING_STATE_SUSPENDED_ON = source_data.SCHEDULING_STATE_SUSPENDED_ON,
                        target_table.SCHEDULING_STATE_RESUMED_ON = source_data.SCHEDULING_STATE_RESUMED_ON,
                        target_table.MEAN_LAG_SEC = source_data.MEAN_LAG_SEC,
                        target_table.MAXIMUM_LAG_SEC = source_data.MAXIMUM_LAG_SEC,
                        target_table.TIME_ABOVE_TARGET_LAG_SEC = source_data.TIME_ABOVE_TARGET_LAG_SEC,
                        target_table.TIME_WITHIN_TARGET_LAG_RATIO = source_data.TIME_WITHIN_TARGET_LAG_RATIO,
                        target_table.LATEST_DATA_TIMESTAMP = source_data.LATEST_DATA_TIMESTAMP,
                        target_table.LAST_COMPLETED_REFRESH_STATE = source_data.LAST_COMPLETED_REFRESH_STATE,
                        target_table.LAST_COMPLETED_REFRESH_STATE_CODE = source_data.LAST_COMPLETED_REFRESH_STATE_CODE,
                        target_table.LAST_COMPLETED_REFRESH_STATE_MESSAGE = source_data.LAST_COMPLETED_REFRESH_STATE_MESSAGE,
                        target_table.EXECUTING_REFRESH_QUERY_ID = source_data.EXECUTING_REFRESH_QUERY_ID
                    WHEN NOT MATCHED THEN
                        INSERT (
                            COLLECTION_TIMESTAMP, DATABASE_NAME, SCHEMA_NAME, TABLE_NAME, QUALIFIED_NAME,
                            TARGET_LAG_SEC, TARGET_LAG_TYPE, SCHEDULING_STATE_STATUS, SCHEDULING_STATE_REASON_CODE,
                            SCHEDULING_STATE_REASON_MESSAGE, SCHEDULING_STATE_SUSPENDED_ON, SCHEDULING_STATE_RESUMED_ON,
                            MEAN_LAG_SEC, MAXIMUM_LAG_SEC, TIME_ABOVE_TARGET_LAG_SEC, TIME_WITHIN_TARGET_LAG_RATIO,
                            LATEST_DATA_TIMESTAMP, LAST_COMPLETED_REFRESH_STATE, LAST_COMPLETED_REFRESH_STATE_CODE,
                            LAST_COMPLETED_REFRESH_STATE_MESSAGE, EXECUTING_REFRESH_QUERY_ID
                        )
                        VALUES (
                            source_data.COLLECTION_TIMESTAMP, source_data.DATABASE_NAME, source_data.SCHEMA_NAME, source_data.TABLE_NAME, source_data.QUALIFIED_NAME,
                            source_data.TARGET_LAG_SEC, source_data.TARGET_LAG_TYPE, source_data.SCHEDULING_STATE_STATUS, source_data.SCHEDULING_STATE_REASON_CODE,
                            source_data.SCHEDULING_STATE_REASON_MESSAGE, source_data.SCHEDULING_STATE_SUSPENDED_ON, source_data.SCHEDULING_STATE_RESUMED_ON,
                            source_data.MEAN_LAG_SEC, source_data.MAXIMUM_LAG_SEC, source_data.TIME_ABOVE_TARGET_LAG_SEC, source_data.TIME_WITHIN_TARGET_LAG_RATIO,
                            source_data.LATEST_DATA_TIMESTAMP, source_data.LAST_COMPLETED_REFRESH_STATE, source_data.LAST_COMPLETED_REFRESH_STATE_CODE,
                            source_data.LAST_COMPLETED_REFRESH_STATE_MESSAGE, source_data.EXECUTING_REFRESH_QUERY_ID
                        );
            ' USING LV_FINAL_METADATA_TABLE_FQDN, lv_metadata_staging_table_fqdn;
            lv_message := lv_message || '  Metadata Snapshot merge complete.\n';
        EXCEPTION
            WHEN OTHER THEN
                lv_loop_error_message := 'ERROR merging Metadata Snapshot: ' || SQLERRM();
                lv_message := lv_message || '    ' || lv_loop_error_message || '\n';
                lv_any_async_job_reported_failure := TRUE;
        END;

        -- --- Merge Tracking Status Updates from Staging ---
        BEGIN
            lv_message := lv_message || '  Merging tracking status from staging to ' || LV_TRACKING_TABLE_FQDN || '\n';
            EXECUTE IMMEDIATE '
                MERGE INTO IDENTIFIER(:1) AS target_table
                USING (
                    SELECT
                        QUALIFIED_NAME,
                        MAX(CASE WHEN JOB_TYPE = ''REFRESH_HISTORY'' THEN STATUS END) AS REFRESH_HISTORY_STATUS,
                        MAX(CASE WHEN JOB_TYPE = ''REFRESH_HISTORY'' THEN MESSAGE END) AS REFRESH_HISTORY_MESSAGE,
                        MAX(CASE WHEN JOB_TYPE = ''REFRESH_HISTORY'' THEN COLLECTION_TIMESTAMP END) AS REFRESH_HISTORY_TIMESTAMP,
                        MAX(CASE WHEN JOB_TYPE = ''METADATA_SNAPSHOT'' THEN STATUS END) AS METADATA_SNAPSHOT_STATUS,
                        MAX(CASE WHEN JOB_TYPE = ''METADATA_SNAPSHOT'' THEN MESSAGE END) AS METADATA_SNAPSHOT_MESSAGE,
                        MAX(CASE WHEN JOB_TYPE = ''METADATA_SNAPSHOT'' THEN COLLECTION_TIMESTAMP END) AS METADATA_SNAPSHOT_TIMESTAMP
                    FROM IDENTIFIER(:2)
                    WHERE DRIVER_RUN_UUID = :3
                    GROUP BY QUALIFIED_NAME
                ) AS source_data
                ON target_table.QUALIFIED_NAME = source_data.QUALIFIED_NAME
                WHEN MATCHED THEN
                    UPDATE SET
                        LAST_REFRESH_HISTORY_COLLECTION_STATUS = COALESCE(source_data.REFRESH_HISTORY_STATUS, target_table.LAST_REFRESH_HISTORY_COLLECTION_STATUS),
                        LAST_REFRESH_HISTORY_COLLECTION_MESSAGE = COALESCE(source_data.REFRESH_HISTORY_MESSAGE, target_table.LAST_REFRESH_HISTORY_COLLECTION_MESSAGE),
                        LAST_REFRESH_HISTORY_COLLECTION_TIMESTAMP = COALESCE(source_data.REFRESH_HISTORY_TIMESTAMP, target_table.LAST_REFRESH_HISTORY_COLLECTION_TIMESTAMP),
                        LAST_METADATA_COLLECTION_STATUS = COALESCE(source_data.METADATA_SNAPSHOT_STATUS, target_table.LAST_METADATA_COLLECTION_STATUS),
                        LAST_METADATA_COLLECTION_MESSAGE = COALESCE(source_data.METADATA_SNAPSHOT_MESSAGE, target_table.LAST_METADATA_COLLECTION_MESSAGE),
                        LAST_METADATA_COLLECTION_TIMESTAMP = COALESCE(source_data.METADATA_SNAPSHOT_TIMESTAMP, target_table.LAST_METADATA_COLLECTION_TIMESTAMP),
                        UPDATED_AT = CURRENT_TIMESTAMP()::TIMESTAMP_NTZ;
            ' USING LV_TRACKING_TABLE_FQDN, lv_tracking_update_staging_table_fqdn, lv_driver_run_uuid;
            lv_message := lv_message || '  Tracking status merge complete.\n';
        EXCEPTION
            WHEN OTHER THEN
                lv_loop_error_message := 'ERROR merging tracking status: ' || SQLERRM();
                lv_message := lv_message || '    ' || lv_loop_error_message || '\n';
                lv_any_async_job_reported_failure := TRUE;
        END;
        lv_merges_end_time := CURRENT_TIMESTAMP();
    ELSE
        lv_message := lv_message || 'Skipping merges to main tables due to previously detected ASYNC job failures.\n';
        lv_merges_start_time := lv_driver_run_end_time;
        lv_merges_end_time := lv_driver_run_end_time;
    END IF;

    -- --- Conditional COMMIT or ROLLBACK for the main transaction ---
    IF (lv_any_async_job_reported_failure) THEN
        ROLLBACK;
        lv_message := lv_message || 'Main transaction ROLLED BACK due to detected ASYNC job failures or merge errors.\n';
    ELSE
        COMMIT;
        lv_message := lv_message || 'Main transaction COMMITTED successfully.\n';
        lv_driver_overall_status := 'SUCCESS';
    END IF;


    -- --- Step 6: Clean up ALL Temporary Staging Tables ---
    EXECUTE IMMEDIATE 'DROP TABLE IF EXISTS ' || :lv_refresh_history_staging_table_fqdn || ';';
    EXECUTE IMMEDIATE 'DROP TABLE IF EXISTS ' || :lv_metadata_staging_table_fqdn || ';';
    EXECUTE IMMEDIATE 'DROP TABLE IF EXISTS ' || :lv_tracking_update_staging_table_fqdn || ';';
    lv_message := lv_message || 'Cleaned up all temporary staging tables.\n';

    -- --- Step 7: Final Summary and Return ---
    SELECT COUNT(*) INTO lv_overall_success_count
    FROM IDENTIFIER(:lv_tracking_update_staging_table_fqdn)
    WHERE DRIVER_RUN_UUID = :lv_driver_run_uuid
      AND STATUS = 'SUCCESS';

    SELECT COUNT(*) INTO lv_overall_fail_count
    FROM IDENTIFIER(:lv_tracking_update_staging_table_fqdn)
    WHERE DRIVER_RUN_UUID = :lv_driver_run_uuid
      AND STATUS != 'SUCCESS';


    lv_final_overall_end_time := CURRENT_TIMESTAMP();

    lv_message := lv_message || 'Total tables in tracking: ' || lv_total_tables_found || '\n';
    lv_message := lv_message || 'Total ASYNC Jobs launched: ' || lv_jobs_launched_count || '\n';
    lv_message := lv_message || 'Overall SUCCESS of ASYNC Jobs: ' || lv_overall_success_count || '\n';
    lv_message := lv_message || 'Overall FAILED ASYNC Jobs: ' || lv_overall_fail_count || '\n';
    lv_message := lv_message || 'DYNAMIC TABLE COLLECTION DRIVER finished at ' || lv_final_overall_end_time || '\n';

    -- --- Construct JSON Return Object ---
    RETURN OBJECT_CONSTRUCT(
        'status', lv_driver_overall_status,
        'message', lv_message,
        'driver_run_uuid', lv_driver_run_uuid,
        'start_time', lv_driver_run_start_time,
        'end_time', lv_final_overall_end_time,
        'total_tables_found', lv_total_tables_found,
        'total_jobs_launched', lv_jobs_launched_count,
        'total_async_jobs_succeeded', lv_overall_success_count,
        'total_async_jobs_failed', lv_overall_fail_count,
        'job_audit_details', lv_job_audit_details, -- Already populated with condensed details
        'phase_durations_sec', OBJECT_CONSTRUCT(
            'async_launch_duration_sec', NVL(DATEDIFF('millisecond', lv_async_launch_start_time, lv_async_launch_end_time), 0) / 1000,
            'async_await_duration_sec', NVL(DATEDIFF('millisecond', lv_async_await_start_time, lv_async_await_end_time), 0) / 1000,
            'merge_duration_sec', NVL(DATEDIFF('millisecond', lv_merges_start_time, lv_merges_end_time), 0) / 1000
        ),
        'total_run_duration_sec', DATEDIFF('millisecond', lv_driver_run_start_time, lv_final_overall_end_time) / 1000
    );

EXCEPTION
    WHEN OTHER THEN
        ROLLBACK;
        lv_error_message_overall := 'CRITICAL ERROR in DYNAMIC TABLE COLLECTION DRIVER (Unhandled): ' || SQLERRM();
        lv_final_overall_end_time := CURRENT_TIMESTAMP();
        RETURN OBJECT_CONSTRUCT(
            'status', 'CRITICAL_FAILURE',
            'message', lv_error_message_overall,
            'driver_run_uuid', lv_driver_run_uuid,
            'start_time', lv_driver_run_start_time,
            'end_time', lv_final_overall_end_time,
            'total_tables_found', NVL(lv_total_tables_found, 0),
            'total_jobs_launched', NVL(lv_jobs_launched_count, 0),
            'total_async_jobs_succeeded', 0,
            'total_async_jobs_failed', NVL(lv_jobs_launched_count, 0),
            'job_audit_details', lv_job_audit_details,
            'phase_durations_sec', OBJECT_CONSTRUCT(
                'async_launch_duration_sec', NVL(DATEDIFF('millisecond', lv_async_launch_start_time, lv_async_launch_end_time), 0) / 1000,
                'async_await_duration_sec', NVL(DATEDIFF('millisecond', lv_async_await_start_time, lv_async_await_end_time), 0) / 1000,
                'merge_duration_sec', 0
            ),
            'total_run_duration_sec', DATEDIFF('millisecond', lv_driver_run_start_time, lv_final_overall_end_time) / 1000
        );
END;
$$;
