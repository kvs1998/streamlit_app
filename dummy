SHOW TASKS LIKE 'task%';

SELECT "name", "state", "last_scheduled_time", "last_successful_completion_time"
FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));


-- columns in A but not B
SELECT 'IN_A_NOT_IN_B' as source, column_name, data_type
FROM information_schema.columns
WHERE table_catalog='DB' AND table_schema='SCHEMA' AND table_name='TABLE_A'
MINUS
SELECT column_name, data_type
FROM information_schema.columns
WHERE table_catalog='DB' AND table_schema='SCHEMA' AND table_name='TABLE_B';

-- columns in B but not A
SELECT 'IN_B_NOT_IN_A' as source, column_name, data_type
FROM information_schema.columns
WHERE table_catalog='DB' AND table_schema='SCHEMA' AND table_name='TABLE_B'
MINUS
SELECT column_name, data_type
FROM information_schema.columns
WHERE table_catalog='DB' AND table_schema='SCHEMA' AND table_name='TABLE_A';


-- Corrected anonymous block: use REGEXP_COUNT parameters for case-insensitive matching,
-- escape \b properly, and append () for FUNCTION when calling GET_DDL.

BEGIN
  -- Config flags (change as needed)
  LET target_word STRING := 'nanosecond';       -- word to search
  LET use_exact_word_match BOOLEAN := TRUE;     -- TRUE => whole-word match (\b), FALSE => substring
  LET case_insensitive BOOLEAN := TRUE;         -- TRUE => case-insensitive, FALSE => case-sensitive

  -- Create / populate object list (object_type optional; default to 'TABLE')
  EXECUTE IMMEDIATE '
    CREATE OR REPLACE TEMPORARY TABLE MY_OBJECT_LIST (
      OBJECT_NAME VARCHAR(4000),
      OBJECT_TYPE VARCHAR(50) DEFAULT ''TABLE''
    )
  ';

  -- Example rows - replace with your real objects
  EXECUTE IMMEDIATE '
    INSERT INTO MY_OBJECT_LIST (OBJECT_NAME, OBJECT_TYPE) VALUES
      (''YOUR_TABLE_1'', ''TABLE''),
      (''YOUR_VIEW_2'',  ''VIEW''),
      (''YOUR_FUNC3'',  ''FUNCTION'')   -- functions will use () when calling GET_DDL
  ';

  -- Messages table
  EXECUTE IMMEDIATE '
    CREATE OR REPLACE TEMPORARY TABLE DDL_CHECK_MESSAGES (
      MESSAGE_TEXT VARCHAR(1000)
    )
  ';

  -- variables for loop
  DECLARE
    object_cursor CURSOR FOR SELECT OBJECT_NAME, OBJECT_TYPE FROM MY_OBJECT_LIST;
    object_name_var STRING;
    object_type_var STRING;
    object_name_for_ddl STRING;
    ddl_result STRING;
    occurrences NUMBER := 0;
    total_objects_with_matches NUMBER := 0;
    total_occurrences NUMBER := 0;
    regex_pattern STRING;
    regex_flags STRING := '';
    insert_message_sql STRING;
    object_exists NUMBER := 0;
  BEGIN
    -- Build regex flags string for REGEXP_COUNT (use 'i' for case-insensitive)
    IF case_insensitive THEN
      regex_flags := 'i';
    ELSE
      regex_flags := '';
    END IF;

    -- Loop each object
    FOR object_row IN object_cursor DO
      object_name_var := object_row.OBJECT_NAME;
      object_type_var := NVL(UPPER(object_row.OBJECT_TYPE), 'TABLE');

      -- Ensure the object exists in the current DB/SCHEMA by querying INFORMATION_SCHEMA.OBJECTS
      -- This prevents GET_DDL from throwing if the object is absent.
      SELECT COUNT(*) INTO :object_exists
      FROM INFORMATION_SCHEMA.OBJECTS
      WHERE OBJECT_NAME = object_name_var
        AND UPPER(OBJECT_TYPE) = object_type_var
      LIMIT 1;

      IF object_exists = 0 THEN
        insert_message_sql := 'INSERT INTO DDL_CHECK_MESSAGES (MESSAGE_TEXT) VALUES (''Object "' 
                              || object_name_var || '" of type ' || object_type_var || ' not found.'')';
        EXECUTE IMMEDIATE insert_message_sql;
        CONTINUE;
      END IF;

      -- Build object name for GET_DDL: append () for functions (per your note)
      IF object_type_var = 'FUNCTION' THEN
        object_name_for_ddl := object_name_var || '()';
      ELSE
        object_name_for_ddl := object_name_var;
      END IF;

      -- Get the DDL for the object (GET_DDL returns a single string)
      ddl_result := GET_DDL(object_type_var, object_name_for_ddl);

      -- Build regex pattern: escape word boundaries properly for SQL string (use \\b)
      IF use_exact_word_match THEN
        -- whole word match using word boundaries \b
        regex_pattern := '\\b' || target_word || '\\b';
      ELSE
        -- substring
        regex_pattern := target_word;
      END IF;

      -- Count occurrences using REGEXP_COUNT.
      -- Use position=1, occurrence=0 to count all occurrences, and pass regex_flags ('i' or '')
      occurrences := REGEXP_COUNT(ddl_result, regex_pattern, 1, 0, regex_flags);

      -- If occurrences > 0 insert message and update totals
      IF occurrences > 0 THEN
        total_objects_with_matches := total_objects_with_matches + 1;
        total_occurrences := total_occurrences + occurrences;

        insert_message_sql := 'INSERT INTO DDL_CHECK_MESSAGES (MESSAGE_TEXT) VALUES (''Object "' 
                              || object_name_var || '" (' || object_type_var || ') contains "' 
                              || target_word || '" ' || occurrences || ' time(s) in its DDL.'')';
        EXECUTE IMMEDIATE insert_message_sql;
      ELSE
        -- optional: record objects where not found
        insert_message_sql := 'INSERT INTO DDL_CHECK_MESSAGES (MESSAGE_TEXT) VALUES (''Object "' 
                              || object_name_var || '" (' || object_type_var || ') does NOT contain "' 
                              || target_word || '" in its DDL.'')';
        EXECUTE IMMEDIATE insert_message_sql;
      END IF;
    END FOR;

    -- Insert summary messages
    IF total_objects_with_matches = 0 THEN
      insert_message_sql := 'INSERT INTO DDL_CHECK_MESSAGES (MESSAGE_TEXT) VALUES (''No objects found containing "' 
                            || target_word || '" in their DDL.'')';
      EXECUTE IMMEDIATE insert_message_sql;
    ELSE
      insert_message_sql := 'INSERT INTO DDL_CHECK_MESSAGES (MESSAGE_TEXT) VALUES (''' 
                            || total_objects_with_matches || ' object(s) contain "' || target_word || '" (total ' 
                            || total_occurrences || ' occurrence(s) across all objects). '')';
      EXECUTE IMMEDIATE insert_message_sql;
    END IF;

  END;
END;

-- View messages
SELECT MESSAGE_TEXT FROM DDL_CHECK_MESSAGES ORDER BY MESSAGE_TEXT;
