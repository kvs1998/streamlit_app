# tabs/dt_health_tab.py
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# --- Helper function to convert seconds to a more readable format ---
def format_seconds_to_readable(seconds_series, format_type):
    # Ensure seconds_series is a Series for consistent behavior
    if not isinstance(seconds_series, pd.Series):
        seconds_series = pd.Series([seconds_series])

    if seconds_series.empty or pd.isna(seconds_series).all():
        return pd.Series(["N/A"] * len(seconds_series), index=seconds_series.index)

    # Convert to numeric, coercing errors to NaN before processing
    numeric_series = pd.to_numeric(seconds_series, errors='coerce')

    if format_type == "seconds":
        return numeric_series.round(1).astype(str) + "s"
    elif format_type == "minutes":
        return (numeric_series / 60).round(1).astype(str) + "m"
    elif format_type == "hours":
        return (numeric_series / 3600).round(1).astype(str) + "h"
    elif format_type == "days":
        return (numeric_series / 86400).round(1).astype(str) + "d"
    elif format_type == "mixed":
        def mix_format(s):
            if pd.isna(s) or s is None: return "N/A"
            s = float(s)
            if s == 0: return "0s"

            days = int(s // 86400)
            hours = int((s % 86400) // 3600)
            minutes = int((s % 3600) // 60)
            seconds = s % 60
            
            parts = []
            if days > 0: parts.append(f"{days}d")
            if hours > 0: parts.append(f"{hours}h")
            if minutes > 0: parts.append(f"{minutes}m")
            # Only include seconds if there are no larger units or if seconds is significant
            if seconds > 0.1 and (not parts or seconds >= 1):
                parts.append(f"{seconds:.1f}s")
            
            return " ".join(parts) if parts else "0s"
        return numeric_series.apply(mix_format)
    return numeric_series.astype(str)


# --- Helper function for Legend text formatting (scalar value) ---
def format_stale_days_for_legend(days_value):
    if pd.isna(days_value): return "N/A"
    if days_value == 1: return "1 day"
    return f"{int(days_value)} days"


# --- Define Global Colors for Row Styling ---
BG_COLOR_GOOD = '#ccffcc' # Light Green (Healthy)
BG_COLOR_WARNING = '#ffe0b3' # Light Orange (Warning/Partial Failure)
BG_COLOR_CRITICAL = '#f8d7da' # Light Red (Suspended/Failed)
BG_COLOR_NONE = '#ffffff' # Explicit white for 'None' option or NaN values


# Helper function for ROW-WISE conditional formatting
# This function receives a ROW from the DataFrame it's styling (final_df_for_display_sorted).
# It uses 'original_df_full_data' to lookup the corresponding original data.
def apply_row_style(row_from_display_df, color_by_option, thresholds, original_df_full_data):
    """
    Applies background color to the entire row based on the selected metric and its thresholds.
    - row_from_display_df: A row from the DataFrame being styled (final_df_for_display_sorted), with display labels.
    - color_by_option, thresholds: Styling parameters.
    - original_df_full_data: The complete DataFrame with original column names (final_filtered_metadata_df).
    """
    
    current_qualified_name = row_from_display_df.get('Dynamic Table')

    row_original_data = pd.Series(dtype='object')
    
    if isinstance(original_df_full_data, pd.DataFrame) and \
       'QUALIFIED_NAME' in original_df_full_data.columns and \
       current_qualified_name in original_df_full_data['QUALIFIED_NAME'].values:
        
        row_original_data = original_df_full_data[
            original_df_full_data['QUALIFIED_NAME'] == current_qualified_name
        ].iloc[0]
    
    style_str = f'background-color: {BG_COLOR_NONE}'

    if row_original_data.empty: 
        pass 
    elif color_by_option == 'Status':
        status = row_original_data.get('SCHEDULING_STATE_STATUS')
        last_refresh_state = row_original_data.get('LAST_COMPLETED_REFRESH_STATE')

        if status == 'SUSPENDED':
            style_str = f'background-color: {BG_COLOR_CRITICAL}'
        elif last_refresh_state == 'FAILED':
            style_str = f'background-color: {BG_COLOR_CRITICAL}'
        elif last_refresh_state in ['UPSTREAM_FAILED', 'CANCELLED', 'WARNING']:
            style_str = f'background-color: {BG_COLOR_WARNING}'
        elif status == 'RUNNING' and last_refresh_state == 'SUCCEEDED':
            style_str = f'background-color: {BG_COLOR_GOOD}'
        else: # Default for other or unknown states, assume good if not explicitly bad
            style_str = f'background-color: {BG_COLOR_GOOD}'

    elif color_by_option == 'Lag Ratio':
        ratio = row_original_data.get('TIME_WITHIN_TARGET_LAG_RATIO')
        if ratio < thresholds['lag_ratio']['critical']: # This is 0.01
            style_str = f'background-color: {BG_COLOR_CRITICAL}'
        elif ratio < thresholds['lag_ratio']['warning']: # This is 0.70
            style_str = f'background-color: {BG_COLOR_WARNING}'
        else:
            style_str = f'background-color: {BG_COLOR_GOOD}'
            
    elif color_by_option == 'Latest Data Time':
        latest_data_ts = row_original_data.get('LATEST_DATA_TIMESTAMP')
        if pd.isna(latest_data_ts): 
            style_str = f'background-color: {BG_COLOR_NONE}'
        else:
            try:
                time_diff_days = (datetime.now() - latest_data_ts).total_seconds() / 86400 # Age in days
                
                # Check critical first (oldest data)
                if time_diff_days >= thresholds['latest_data_time']['critical_days']:
                    style_str = f'background-color: {BG_COLOR_CRITICAL}'
                # Then check warning (moderately old)
                elif time_diff_days >= thresholds['latest_data_time']['warning_days']:
                    style_str = f'background-color: {BG_COLOR_WARNING}'
                # Otherwise, it's good (fresh)
                else: 
                    style_str = f'background-color: {BG_COLOR_GOOD}'
            except Exception: 
                style_str = f'background-color: {BG_COLOR_NONE}'
    
    return pd.Series(style_str, index=row_from_display_df.index)


def render_dt_health_tab(metadata_df: pd.DataFrame):
    st.header("Dynamic Table Health & Current Status")
    st.write("Analyze the current operational state and aggregate lag metrics of your dynamic tables.")

    if metadata_df.empty:
        st.info("No metadata available for DT HEALTH tab. Check data source or collection.", icon="ℹ️")
        return

    if 'QUALIFIED_NAME' not in metadata_df.columns:
        st.error("Error: 'QUALIFIED_NAME' column missing in metadata_df. Cannot proceed with DT Health tab.", icon="❌")
        return 
    metadata_df['QUALIFIED_NAME'] = metadata_df['QUALIFIED_NAME'].astype(str).str.upper()

    required_cols_for_lookup = [
        'DATABASE_NAME', 'SCHEMA_NAME', 'TABLE_NAME', 
        'SCHEDULING_STATE_STATUS', 'LAST_COMPLETED_REFRESH_STATE', 
        'MEAN_LAG_SEC', 'MAXIMUM_LAG_SEC', 'TIME_ABOVE_TARGET_LAG_SEC', 'TIME_WITHIN_TARGET_LAG_RATIO', 'TARGET_LAG_SEC',
        'LATEST_DATA_TIMESTAMP' 
    ]
    for col in required_cols_for_lookup:
        if col not in metadata_df.columns:
            st.warning(f"Warning: Column '{col}' missing in metadata_df. Initializing with NaNs/Defaults for safety.", icon="⚠️")
            if col.endswith('_SEC') or col.endswith('_RATIO'):
                metadata_df[col] = np.nan
            elif col.endswith('_TIMESTAMP'): 
                 metadata_df[col] = pd.NaT 
            else:
                metadata_df[col] = 'UNKNOWN'
    
    for col in ['MEAN_LAG_SEC', 'MAXIMUM_LAG_SEC', 'TIME_ABOVE_TARGET_LAG_SEC', 'TARGET_LAG_SEC']:
        metadata_df[col] = pd.to_numeric(metadata_df[col], errors='coerce')
    
    metadata_df['TIME_WITHIN_TARGET_LAG_RATIO'] = pd.to_numeric(metadata_df['TIME_WITHIN_TARGET_LAG_RATIO'], errors='coerce').fillna(0.0)

    metadata_df['LATEST_DATA_TIMESTAMP'] = pd.to_datetime(metadata_df['LATEST_DATA_TIMESTAMP'], errors='coerce')


    final_filtered_metadata_df = metadata_df.copy() 
    
    if final_filtered_metadata_df.empty:
        st.info("No Dynamic Table data available. Please adjust your filters or check data source.", icon="ℹ️")
        return


    # --- Filters for DT Health Tab ---
    st.markdown("---")
    st.subheader("Apply Filters for DT Health")

    filter_cols_dt_health_row1 = st.columns([1, 1, 1, 1])

    with filter_cols_dt_health_row1[0]:
        all_databases_dt_health = ['All'] + sorted(final_filtered_metadata_df['DATABASE_NAME'].unique().tolist())
        selected_database_dt_health = st.selectbox(
            "Database:", options=all_databases_dt_health, key="new_db_filter_dt_health"
        )
    with filter_cols_dt_health_row1[1]:
        temp_df_for_schema_options = final_filtered_metadata_df.copy()
        if selected_database_dt_health != 'All':
            temp_df_for_schema_options = temp_df_for_schema_options[temp_df_for_schema_options['DATABASE_NAME'] == selected_database_dt_health].copy()

        if not temp_df_for_schema_options.empty:
            schemas_in_db_dt_health = ['All'] + sorted(temp_df_for_schema_options['SCHEMA_NAME'].unique().tolist())
        else:
            schemas_in_db_dt_health = ['All']
            st.info("No schemas found for selected Database.", icon="ℹ️")

        selected_schema_dt_health = st.selectbox(
            "Schema:", options=schemas_in_db_dt_health, key="new_schema_filter_dt_health"
        )
    
    df_for_table_options = final_filtered_metadata_df.copy()
    if selected_database_dt_health != 'All':
        df_for_table_options = df_for_table_options[df_for_table_options['DATABASE_NAME'] == selected_database_dt_health].copy()
    if selected_schema_dt_health != 'All':
        df_for_table_options = df_for_table_options[df_for_table_options['SCHEMA_NAME'] == selected_schema_dt_health].copy()


    with filter_cols_dt_health_row1[2]:
        if not df_for_table_options.empty:
            all_tables_dt_health_options = ['All'] + sorted(df_for_table_options['TABLE_NAME'].unique().tolist())
            default_tables_dt_health_selected = ['All']
        else:
            all_tables_dt_health_options = ['All']
            default_tables_dt_health_selected = ['All']
            st.info("No tables found for selected DB/Schema.", icon="ℹ️")
        selected_table_dt_health = st.multiselect(
            "Table(s):", options=all_tables_dt_health_options, default=default_tables_dt_health_selected, key="new_table_filter_dt_health"
        )
    with filter_cols_dt_health_row1[3]:
        all_scheduling_states = ['All'] + sorted(final_filtered_metadata_df['SCHEDULING_STATE_STATUS'].unique().tolist())
        selected_scheduling_state = st.multiselect(
            "Scheduling State(s):", options=all_scheduling_states, default=['All'], key="new_scheduling_state_filter_dt_health"
        )
    
    filter_cols_dt_health_row2 = st.columns([1])
    with filter_cols_dt_health_row2[0]:
        time_format_option = st.radio(
            "Display Lag Times In:", 
            options=["mixed", "seconds", "minutes", "hours", "days"], 
            index=0,
            horizontal=True,
            key="new_time_format_dt_health"
        )
    
    st.markdown("---")


    # --- Apply Filters to Main DataFrame (re-filter based on user selections) ---
    if selected_database_dt_health != 'All':
        final_filtered_metadata_df = final_filtered_metadata_df[final_filtered_metadata_df['DATABASE_NAME'] == selected_database_dt_health].copy()
    if selected_schema_dt_health != 'All':
        final_filtered_metadata_df = final_filtered_metadata_df[final_filtered_metadata_df['SCHEMA_NAME'] == selected_schema_dt_health].copy()
    if selected_table_dt_health and 'All' not in selected_table_dt_health:
        final_filtered_metadata_df = final_filtered_metadata_df[final_filtered_metadata_df['TABLE_NAME'].isin(selected_table_dt_health)].copy()
    elif not selected_table_dt_health:
        st.warning("No table(s) selected. Display will be empty.", icon="⚠️")
        final_filtered_metadata_df = pd.DataFrame()

    if selected_scheduling_state and 'All' not in selected_scheduling_state:
        final_filtered_metadata_df = final_filtered_metadata_df[final_filtered_metadata_df['SCHEDULING_STATE_STATUS'].isin(selected_scheduling_state)].copy()
    elif not selected_scheduling_state:
        st.warning("No scheduling state(s) selected. Display will be empty.", icon="⚠️")
        final_filtered_metadata_df = pd.DataFrame()

    if final_filtered_metadata_df.empty:
        st.info("No data available based on current filter selections. Please adjust your filters.", icon="ℹ️")
        return


    # --- Detailed Dynamic Table Current Status Table ---
    st.subheader("Detailed Dynamic Table Status")
    
    color_by_option = st.radio(
        "Color Table By:",
        ('None', 'Status', 'Lag Ratio', 'Latest Data Time'),
        index=0,
        horizontal=True,
        key="new_color_by_dt_health_table"
    )

    # --- Dynamic Severity Legend Section ---
    st.markdown("""
        <style>
        .legend-item {
            display: inline-block;
            margin-right: 15px;
            font-size: 14px;
        }
        .color-box {
            width: 15px;
            height: 15px;
            border-radius: 3px;
            display: inline-block;
            vertical-align: middle;
            margin-right: 5px;
            border: 1px solid #ccc;
        }
        </style>
        """, unsafe_allow_html=True)
    
    # Redefining thresholds for clearer ranges and aligning with the 'days' concept
    thresholds_for_styling = { 
        'mean_lag': {'ok': 300, 'warning': 1800, 'critical': 3600}, # seconds
        'max_lag': {'ok': 600, 'warning': 3600, 'critical': 7200}, # seconds
        'time_above': {'ok': 0, 'warning': 300, 'critical': 1800}, # seconds
        'lag_ratio': {'ok': 0.90, 'warning': 0.70, 'critical': 0.01}, # 90%, 70%, 1%
        'latest_data_time': {
            'critical_days': 3,  # Data >= 3 days old is Critical
            'warning_days': 1    # Data >= 1 day old (but <3 days) is Warning
                                 # Data < 1 day old is Good
        }
    }
    legend_thresholds = thresholds_for_styling 

    legend_content = ""
    
    if color_by_option == 'None':
        legend_content = ""
    elif color_by_option == 'Status':
        # Aligning legend colors: Critical (Red) -> Warning (Orange) -> Good (Green)
        legend_content = f"""
            <div class='legend-item'><span class='color-box' style='background-color: {BG_COLOR_CRITICAL};'></span>Suspended / Failed</div>
            <div class='legend-item'><span class='color-box' style='background-color: {BG_COLOR_WARNING};'></span>Warning / Partial Failure</div>
            <div class='legend-item'><span class='color-box' style='background-color: {BG_COLOR_GOOD};'></span>Running (Succeeded)</div>
        """
    elif color_by_option == 'Lag Ratio':
        threshold_set = legend_thresholds['lag_ratio'] 
        
        def format_legend_value_ratio(val_raw):
            if pd.isna(val_raw): return "N/A"
            return f"{round(val_raw * 100, 1)}%"
        
        critical_val_fmt = format_legend_value_ratio(threshold_set['critical'])
        warning_val_fmt = format_legend_value_ratio(threshold_set['warning'])
        ok_val_fmt = format_legend_value_ratio(threshold_set['ok'])

        # Aligning legend colors: Critical (Red) -> Warning (Orange) -> Good (Green)
        legend_content = f"""
            <div class='legend-item'><span class='color-box' style='background-color: {BG_COLOR_CRITICAL};'></span>Critical (< {critical_val_fmt})</div>
            <div class='legend-item'><span class='color-box' style='background-color: {BG_COLOR_WARNING};'></span>Warning (< {warning_val_fmt})</div>
            <div class='legend-item'><span class='color-box' style='background-color: {BG_COLOR_GOOD};'></span>Good (>= {ok_val_fmt})</div>
        """
    elif color_by_option == 'Latest Data Time':
        critical_val_days = legend_thresholds['latest_data_time']['critical_days']
        warning_val_days = legend_thresholds['latest_data_time']['warning_days']
        
        critical_text = format_stale_days_for_legend(critical_val_days)
        warning_text = format_stale_days_for_legend(warning_val_days)

        # Aligning legend colors: Critical (Red) -> Warning (Orange) -> Good (Green)
        legend_content = f"""
            <div class='legend-item'><span class='color-box' style='background-color: {BG_COLOR_CRITICAL};'></span>{critical_text} or older</div>
            <div class='legend-item'><span class='color-box' style='background-color: {BG_COLOR_WARNING};'></span>{warning_text} to < {critical_val_days} days old</div>
            <div class='legend-item'><span class='color-box' style='background-color: {BG_COLOR_GOOD};'></span>Less than {warning_text} old</div>
        """
        
    if legend_content:
        st.markdown(
            f"""
            <div style='display: flex; align-items: center; margin-bottom: 10px; flex-wrap: wrap;'>
                <span style='font-weight: bold; font-size: 16px; margin-right: 10px;'>Severity:</span>
                {legend_content}
            </div>
            """, unsafe_allow_html=True
        )
    # --- End Dynamic Severity Legend Section ---

    st.write("Detailed metadata and lag metrics for each dynamic table based on latest snapshot.")

    if final_filtered_metadata_df.empty:
        st.info("No detailed dynamic table status to display based on current filters.", icon="ℹ️")
        return

    # Use a copy for display formatting
    df_for_display = final_filtered_metadata_df.copy()
    
    # Apply formatting for display to new columns
    df_for_display['TARGET_LAG_SEC_FMT'] = format_seconds_to_readable(df_for_display['TARGET_LAG_SEC'], time_format_option)
    df_for_display['MEAN_LAG_SEC_FMT'] = format_seconds_to_readable(df_for_display['MEAN_LAG_SEC'], time_format_option)
    df_for_display['MAXIMUM_LAG_SEC_FMT'] = format_seconds_to_readable(df_for_display['MAXIMUM_LAG_SEC'], time_format_option)
    df_for_display['TIME_ABOVE_TARGET_LAG_SEC_FMT'] = format_seconds_to_readable(df_for_display['TIME_ABOVE_TARGET_LAG_SEC'], time_format_option)
    df_for_display['TIME_WITHIN_TARGET_LAG_RATIO_FMT'] = df_for_display['TIME_WITHIN_TARGET_LAG_RATIO'].apply(lambda x: f"{round(x * 100, 1)}%") 


    # Define display columns and their labels
    dt_health_display_columns_order = [
        'QUALIFIED_NAME',
        'SCHEDULING_STATE_STATUS', 'SCHEDULING_STATE_REASON_MESSAGE', 
        'TARGET_LAG_SEC_FMT', 'MEAN_LAG_SEC_FMT', 'MAXIMUM_LAG_SEC_FMT',
        'TIME_ABOVE_TARGET_LAG_SEC_FMT', 'TIME_WITHIN_TARGET_LAG_RATIO_FMT', 
        'LATEST_DATA_TIMESTAMP', # Using the original timestamp for display
        'LAST_COMPLETED_REFRESH_STATE', 'EXECUTING_REFRESH_QUERY_ID',
        'COLLECTION_TIMESTAMP'
    ]
    
    dt_health_display_labels = {
        'QUALIFIED_NAME': 'Dynamic Table',
        'SCHEDULING_STATE_STATUS': 'Status',
        'SCHEDULING_STATE_REASON_MESSAGE': 'Reason',
        'TARGET_LAG_SEC_FMT': 'Target Lag',
        'MEAN_LAG_SEC_FMT': 'Mean Lag',
        'MAXIMUM_LAG_SEC_FMT': 'Max Lag',
        'TIME_ABOVE_TARGET_LAG_SEC_FMT': 'Time Above Lag',
        'TIME_WITHIN_TARGET_LAG_RATIO_FMT': 'Lag Ratio (%)',
        'LATEST_DATA_TIMESTAMP': 'Latest Data Time', 
        'LAST_COMPLETED_REFRESH_STATE': 'Last Refresh Status',
        'EXECUTING_REFRESH_QUERY_ID': 'Executing Query ID',
        'COLLECTION_TIMESTAMP': 'Snapshot Time'
    }

    # Select and rename columns for the display DataFrame
    df_for_display = df_for_display[[col for col in dt_health_display_columns_order if col in df_for_display.columns]].rename(columns=dt_health_display_labels)


    # --- Apply Sorting ---
    final_df_for_display_sorted = df_for_display.copy() 

    # Define a consistent severity order mapping for sorting based on Status and Refresh State
    # This will be used both for 'Status' coloring and for 'None' option default sort
    status_and_refresh_severity_sort_order = {
        # Critical states (Red)
        ('SUSPENDED', 'FAILED'): 0,
        ('SUSPENDED', 'UPSTREAM_FAILED'): 1,
        ('SUSPENDED', 'CANCELLED'): 2,
        ('SUSPENDED', 'WARNING'): 3,
        ('SUSPENDED', 'SUCCEEDED'): 4, # Should not happen, but ordered
        ('SUSPENDED', 'UNKNOWN'): 5,
        ('RUNNING', 'FAILED'): 6, # Running but failed
        # Warning states (Orange)
        ('RUNNING', 'UPSTREAM_FAILED'): 7,
        ('RUNNING', 'CANCELLED'): 8,
        ('RUNNING', 'WARNING'): 9,
        # Good states (Green)
        ('RUNNING', 'SUCCEEDED'): 10,
        # Default/Unknown states (lowest priority)
        ('UNKNOWN', 'UNKNOWN'): 11, # Catch-all for data quality issues
        (None, None): 12 # For rows where even status/refresh is missing
    }

    # Create a compound key in the original filtered metadata for sorting
    final_filtered_metadata_df['COMPOUND_STATUS_SORT_KEY'] = final_filtered_metadata_df.apply(
        lambda row: status_and_refresh_severity_sort_order.get(
            (row['SCHEDULING_STATE_STATUS'], row['LAST_COMPLETED_REFRESH_STATE']),
            status_and_refresh_severity_sort_order[(None, None)] # Default if not found
        ), axis=1
    )


    original_sort_column_map_for_sort_values = {
        'Status': 'COMPOUND_STATUS_SORT_KEY', # Use the new compound key for Status sort
        'Lag Ratio': 'TIME_WITHIN_TARGET_LAG_RATIO', 
        'Latest Data Time': 'LATEST_DATA_TIMESTAMP' 
    }
    
    # --- Determine the sorting logic based on selected 'color_by_option' ---
    if color_by_option == 'None':
        # Default sort: Suspended/Failed (Critical) -> Warning -> Good
        # This uses the same severity mapping as 'Status' color option
        sort_order_indices = final_filtered_metadata_df.sort_values(
            by='COMPOUND_STATUS_SORT_KEY', ascending=True # Ascending to get lower key (higher severity) first
        ).index
        final_df_for_display_sorted = df_for_display.loc[sort_order_indices].reset_index(drop=True)
    else: # If a specific coloring option is selected, apply its corresponding sort
        sort_column_original_name = original_sort_column_map_for_sort_values.get(color_by_option)
        if sort_column_original_name:
            if sort_column_original_name == 'TIME_WITHIN_TARGET_LAG_RATIO': 
                sort_order_indices = final_filtered_metadata_df.sort_values( 
                    by='TIME_WITHIN_TARGET_LAG_RATIO', ascending=False, na_position='last' 
                ).index
                final_df_for_display_sorted = df_for_display.loc[sort_order_indices].reset_index(drop=True)
            elif sort_column_original_name == 'LATEST_DATA_TIMESTAMP':
                 sort_order_indices = final_filtered_metadata_df.sort_values( 
                    by='LATEST_DATA_TIMESTAMP', ascending=False, na_position='last' 
                ).index
                 final_df_for_display_sorted = df_for_display.loc[sort_order_indices].reset_index(drop=True)
            elif sort_column_original_name == 'COMPOUND_STATUS_SORT_KEY': # This is for 'Status' radio button
                sort_order_indices = final_filtered_metadata_df.sort_values( 
                    by='COMPOUND_STATUS_SORT_KEY', ascending=True # Ascending to get lower key (higher severity) first
                ).index
                final_df_for_display_sorted = df_for_display.loc[sort_order_indices].reset_index(drop=True)
        # If no specific sort is defined for the selected color_by_option, no custom sort is applied,
        # which means the table will retain its original order or whatever default pandas sort gives.
        # This seems reasonable.
        
    # --- Apply Styling (row-wise background color) ---
    if color_by_option != 'None':
        styled_df = final_df_for_display_sorted.style.apply(
            lambda row_display: apply_row_style(
                row_display,             
                color_by_option,         
                thresholds_for_styling,  
                final_filtered_metadata_df 
            ), 
            axis=1 
        )
        st.dataframe(
            styled_df,
            use_container_width=True
        )
    else: 
        st.dataframe(
            final_df_for_display_sorted, 
            use_container_width=True
        )
