# --- Table(s) Filter (Depends on Schema) ---
with filter_cols_row2[0]: # Assuming this is the Table(s) column
    disable_widget = False # Default to not disabled

    # 1. Determine the actual unique table names available based on the parent filters
    actual_available_tables_from_df = sorted(current_options_for_cascading['TABLE_NAME'].unique().tolist())
    
    # 2. Determine the list of options to display in the multiselect:
    # If there are NO actual tables, the options should just be an empty list, or ['All']
    if len(actual_available_tables_from_df) == 0:
        all_tables_options_for_widget = [] # No tables available, so no options
        disable_widget = True # Disable the widget if no tables found
        # Also reset the session state for this filter if it's currently holding invalid values
        current_stored_table_filter_value = load_widget_state('canvas_table_filter', ['All'])
        if current_stored_table_filter_value != ['All'] and current_stored_table_filter_value != []:
            # Only reset if it's not already 'All' or empty
            change_widget_state('canvas_table_filter', ['All']) # Programmatically reset to 'All'
    else:
        # If tables are available, options are 'All' + sorted list
        all_tables_options_for_widget = ['All'] + actual_available_tables_from_df

    # 3. Load the persisted state for tables filter
    current_stored_table_filter_value = load_widget_state('canvas_table_filter', ['All'])

    # 4. Filter previously selected tables to ensure they are still valid options
    valid_selected_tables = [table for table in current_stored_table_filter_value if table in all_tables_options_for_widget]
    
    # If the widget should be disabled (no options) but the state is not already empty/All,
    # or if previous selections are no longer valid, explicitly reset the state using change_widget_state.
    if disable_widget or len(valid_selected_tables) != len(current_stored_table_filter_value):
        if 'All' in all_tables_options_for_widget: # If 'All' is an available option
            change_widget_state('canvas_table_filter', ['All'])
        else: # If no options are available (widget disabled) and 'All' isn't an option
            change_widget_state('canvas_table_filter', []) # Set to empty list
    
    # Fetch the value for default after potential reset
    tables_to_preselect = load_widget_state('canvas_table_filter', ['All']) # Re-load after potential change_widget_state call

    selected_tables = st.multiselect(
        "Table(s):",
        options=all_tables_options_for_widget, # Use the correctly derived options list
        key="_canvas_table_filter", # Dummy key for persistence
        default=tables_to_preselect, # Default to the validated list from session state
        on_change=persist_widget_state, # Calls your persist_widget_state
        args=("canvas_table_filter",), # Arguments for persist_widget_state
        disabled=disable_widget # Apply disable property
    )
    
    # Update current_options_for_cascading for children (if tables had children filters)
    # This block is common after multiselect and should be handled by your outer loop's flow.
    # The returned 'selected_tables' is what will be used in your overall filtering logic.
    if 'All' not in selected_tables:
        # This line is about applying the filter for *subsequent* filters in the pipeline,
        # not about deriving options for the current widget.
        # This should live outside the widget definition block in the main rendering loop.
        current_options_for_cascading = current_options_for_cascading[current_options_for_cascading['TABLE_NAME'].isin(selected_tables)]
