# app_driver.py (Your main entry point file)
import streamlit as st
from snowflake.snowpark import Session # Assuming this is your session class

# Import your tabs
import tabs.dt_health_tab as dt_health_tab
import tabs.driver_logs_tab as driver_logs_tab
import tabs.dt_history_tab as dt_history_tab
import tabs.mail_notification_tab as mail_notification_tab
import tabs.overview_tab as overview_tab
import tabs.filter_canvas as filter_canvas_tab # Ensure this is imported

# --- Global Session Management (Crucial for Caching & Persistence) ---
@st.cache_resource
def get_snowflake_session_cached():
    # Replace with your actual Snowflake connection details from st.secrets
    return Session.builder.configs(st.secrets["snowflake"]).create()

if 'get_snowflake_session' not in st.session_state:
    st.session_state.get_snowflake_session = get_snowflake_session_cached


# --- Initialize ALL Global Filter States (Crucial: Define ONCE at app start) ---
# These keys are read by filter_canvas.py and dt_health_tab.py
if 'global_domain_name' not in st.session_state: st.session_state.global_domain_name = 'All'
if 'global_sub_domain_name' not in st.session_state: st.session_state.global_sub_domain_name = 'All'
if 'global_db_filter' not in st.session_state: st.session_state.global_db_filter = 'All'
if 'global_schema_filter' not in st.session_state: st.session_state.global_schema_filter = 'All'
if 'global_table_filter' not in st.session_state: st.session_state.global_table_filter = ['All']
if 'global_scheduling_state_filter' not in st.session_state: st.session_state.global_scheduling_state_filter = ['All']
if 'global_target_lag' not in st.session_state: st.session_state.global_target_lag = ['All']
if 'global_is_active_filter' not in st.session_state: st.session_state.global_is_active_filter = 'All'
if 'display_lag_times_in' not in st.session_state: st.session_state.display_lag_times_in = 'mixed' # This is treated as a global filter


# --- Initialize ALL Local Filter States (for each tab that has them) ---
# dt_health_tab.py local filters (use 'dt_health_tab_' prefix)
if 'dt_health_tab_domain_name' not in st.session_state: st.session_state.dt_health_tab_domain_name = 'All'
if 'dt_health_tab_sub_domain_name' not in st.session_state: st.session_state.dt_health_tab_sub_domain_name = 'All'
if 'dt_health_tab_db_filter' not in st.session_state: st.session_state.dt_health_tab_db_filter = 'All'
if 'dt_health_tab_schema_filter' not in st.session_state: st.session_state.dt_health_tab_schema_filter = 'All'
if 'dt_health_tab_table_filter' not in st.session_state: st.session_state.dt_health_tab_table_filter = ['All']
if 'dt_health_tab_scheduling_state_filter' not in st.session_state: st.session_state.dt_health_tab_scheduling_state_filter = ['All']
if 'dt_health_tab_target_lag' not in st.session_state: st.session_state.dt_health_tab_target_lag = ['All']
if 'dt_health_tab_display_lag_times_in' not in st.session_state: st.session_state.dt_health_tab_display_lag_times_in = 'mixed'

# Add initializations for other tabs here if they have local filters
# e.g., if 'dt_history_tab_db_filter' not in st.session_state: st.session_state.dt_history_tab_db_filter = 'All'


# --- Page Navigation ---
selected_tab = st.sidebar.radio("Navigation", ["Dashboard", "Filter Canvas", "Historical Loads", "Notifications", "Driver Logs", "Overview Tab"], index=0)

if selected_tab == "Dashboard":
    dt_health_tab.render_dt_health_tab() # This will use global filters from session_state
elif selected_tab == "Filter Canvas":
    filter_canvas_tab.render_filter_canvas_tab() # This will also initialize its own widgets using st.session_state
elif selected_tab == "Historical Loads":
    dt_history_tab.render_dt_history_tab()
elif selected_tab == "Notifications":
    mail_notification_tab.render_mail_notification_tab()
elif selected_tab == "Driver Logs":
    driver_logs_tab.render_driver_logs_tab()
elif selected_tab == "Overview Tab":
    overview_tab.render_overview_tab()
