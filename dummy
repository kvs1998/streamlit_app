def render_filter_canvas_tab():
    st.header("Global Filter Canvas")
    st.write("Set high-level filters here to apply across all relevant dashboard tabs. Each dashboard tab can apply further refinements.")

    # Initialize session state for global filters if they don't exist
    if 'global_db_filter' not in st.session_state:
        st.session_state.global_db_filter = 'All'
    if 'global_schema_filter' not in st.session_state:
        st.session_state.global_schema_filter = 'All'
    if 'global_table_filter' not in st.session_state:
        st.session_state.global_table_filter = ['All']
    if 'global_scheduling_state_filter' not in st.session_state:
        st.session_state.global_scheduling_state_filter = ['All']
    if 'global_is_active_filter' not in st.session_state:
        st.session_state.global_is_active_filter = 'All' # 'All', True, False

    all_options_df = get_all_filter_options()

    if all_options_df.empty:
        st.info("No data available to populate filters. Please check the tracking table.", icon="ℹ️")
        return

    st.markdown("---")
    st.subheader("Master Filters")

    filter_cols_row1 = st.columns(3)
    with filter_cols_row1[0]:
        all_databases = ['All'] + sorted(all_options_df['DATABASE_NAME'].unique().tolist())
        # FIX: Calculate index for st.selectbox
        current_db_index = 0
        try:
            current_db_index = all_databases.index(st.session_state.global_db_filter)
        except ValueError:
            # If the stored value is not in options, default to 'All'
            st.session_state.global_db_filter = 'All'
            current_db_index = 0

        selected_db = st.selectbox(
            "Database:",
            options=all_databases,
            key="canvas_db_filter",
            index=current_db_index # Use index
        )
        st.session_state.global_db_filter = selected_db # Update session state after interaction

    with filter_cols_row1[1]:
        schema_options_df = all_options_df.copy()
        if selected_db != 'All':
            schema_options_df = schema_options_df[schema_options_df['DATABASE_NAME'] == selected_db]
        
        all_schemas = ['All'] + sorted(schema_options_df['SCHEMA_NAME'].unique().tolist())
        # FIX: Calculate index for st.selectbox
        current_schema_index = 0
        try:
            current_schema_index = all_schemas.index(st.session_state.global_schema_filter)
        except ValueError:
            st.session_state.global_schema_filter = 'All'
            current_schema_index = 0

        selected_schema = st.selectbox(
            "Schema:",
            options=all_schemas,
            key="canvas_schema_filter",
            index=current_schema_index # Use index
        )
        st.session_state.global_schema_filter = selected_schema

    with filter_cols_row1[2]:
        table_options_df = schema_options_df.copy()
        if selected_schema != 'All':
            table_options_df = table_options_df[table_options_df['SCHEMA_NAME'] == selected_schema]
        
        all_tables = ['All'] + sorted(table_options_df['TABLE_NAME'].unique().tolist())
        # 'default' is correct for st.multiselect
        selected_tables = st.multiselect(
            "Table(s):",
            options=all_tables,
            key="canvas_table_filter",
            default=st.session_state.global_table_filter
        )
        st.session_state.global_table_filter = selected_tables

    filter_cols_row2 = st.columns(2)
    with filter_cols_row2[0]:
        all_scheduling_states = ['All'] + sorted(all_options_df['SCHEDULING_STATE_STATUS'].unique().tolist())
        # 'default' is correct for st.multiselect
        selected_sched_state = st.multiselect(
            "Scheduling State(s):",
            options=all_scheduling_states,
            key="canvas_scheduling_state_filter",
            default=st.session_state.global_scheduling_state_filter
        )
        st.session_state.global_scheduling_state_filter = selected_sched_state

    with filter_cols_row2[1]:
        all_active_states = ['All', True, False] # Use boolean values for consistency
        # FIX: Calculate index for st.selectbox
        current_active_index = 0
        try:
            current_active_index = all_active_states.index(st.session_state.global_is_active_filter)
        except ValueError:
            st.session_state.global_is_active_filter = 'All'
            current_active_index = 0

        selected_active_state = st.selectbox(
            "Is Active:",
            options=all_active_states,
            key="canvas_is_active_filter",
            index=current_active_index # Use index
        )
        st.session_state.global_is_active_filter = selected_active_state

    st.markdown("---")
    st.info("These filters will be automatically applied as a first level of filtering on relevant dashboard tabs.", icon="ℹ️")
